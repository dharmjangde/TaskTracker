{"file_contents":{"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a frontend-only productivity application built with React and Vite that helps users manage their daily tasks, track study sessions, monitor expenses, and view progress reports. The application features a modern interface using shadcn/ui components and uses hardcoded mock data for demonstration purposes. This version is optimized for Vercel deployment and does not require any backend server.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe frontend uses React with TypeScript and Vite as the build tool. The application follows a component-based architecture with:\n\n- **UI Framework**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack React Query for server state management\n- **Charts**: Recharts for data visualization\n\n## Backend Architecture\nThe backend is built with Express.js and follows a RESTful API pattern:\n\n- **Server Framework**: Express.js with TypeScript\n- **Development Setup**: Vite middleware integration for development\n- **Storage Interface**: Abstracted storage layer with in-memory implementation\n- **Session Management**: Built-in support for PostgreSQL sessions\n\n## Data Storage Solutions\nThe application uses a hybrid storage approach:\n\n- **Development**: In-memory storage implementation for rapid development\n- **Production**: PostgreSQL database with Drizzle ORM\n- **Schema**: Comprehensive schema including users, tasks, expenses, study sessions, and achievements\n- **Migrations**: Drizzle-kit for database migrations\n\n## Database Schema Design\nThe database includes five main entities:\n- **Users**: Authentication and streak tracking\n- **Tasks**: Task management with priority, status, and time estimation\n- **Expenses**: Expense tracking with categories and amounts\n- **Study Sessions**: Study time tracking by subject\n- **Achievements**: Gamification system for user engagement\n\n## Frontend Structure\n- **Pages**: Dashboard, Tasks, Expenses, Study Tracker, Reports\n- **Components**: Reusable UI components, charts, modals, and layout components\n- **Hooks**: Custom hooks for mobile detection, productivity data, and toast notifications\n- **Routing**: Single-page application with protected routes\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL hosting (via @neondatabase/serverless)\n- **Drizzle ORM**: Type-safe database operations and migrations\n- **connect-pg-simple**: PostgreSQL session store for Express\n\n## UI and Design\n- **Radix UI**: Accessible component primitives for form controls, dialogs, and navigation\n- **Tailwind CSS**: Utility-first styling framework\n- **Lucide React**: Icon library for consistent iconography\n- **Recharts**: Chart library for data visualization\n\n## Development Tools\n- **Vite**: Build tool and development server\n- **TypeScript**: Type safety and developer experience\n- **ESBuild**: Fast bundling for production builds\n- **Replit Plugins**: Development environment integration\n\n## Data Management\n- **TanStack React Query**: Server state management and caching\n- **React Hook Form**: Form validation and handling\n- **Zod**: Schema validation with Drizzle integration\n- **date-fns**: Date manipulation utilities\n\n## Navigation and Interaction\n- **Wouter**: Lightweight client-side routing\n- **Embla Carousel**: Touch-friendly carousel components\n- **CMDK**: Command palette functionality","size_bytes":3544},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        success: \"var(--success)\",\n        warning: \"var(--warning)\",\n        error: \"var(--error)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"system-ui\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(-10px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        \"slide-in\": {\n          from: {\n            transform: \"translateX(-100%)\",\n          },\n          to: {\n            transform: \"translateX(0)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.3s ease-out\",\n        \"slide-in\": \"slide-in 0.3s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2980},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"// This is a placeholder file to prevent build errors\n// The actual application runs on Vite frontend only\nconsole.log(\"This application now runs frontend-only on Vite\");\nprocess.exit(0);","size_bytes":187},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport TopBar from \"@/components/layout/top-bar\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Expenses from \"@/pages/expenses\";\nimport Study from \"@/pages/study\";\nimport Tasks from \"@/pages/tasks\";\nimport Reports from \"@/pages/reports\";\nimport NotFound from \"@/pages/not-found\";\nimport AchievementModal from \"@/components/modals/achievement-modal\";\nimport AddTaskModal from \"@/components/modals/add-task-modal\";\nimport AddExpenseModal from \"@/components/modals/add-expense-modal\";\nimport MotivationPopup from \"@/components/modals/motivation-popup\";\nimport { useState, useEffect } from \"react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { useMotivation } from \"@/hooks/use-motivation\";\n\nfunction Router() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [achievementModalOpen, setAchievementModalOpen] = useState(false);\n  const [addTaskModalOpen, setAddTaskModalOpen] = useState(false);\n  const [addExpenseModalOpen, setAddExpenseModalOpen] = useState(false);\n  const isMobile = useIsMobile();\n  const { showMotivation, closeMotivation, userData } = useMotivation();\n\n  // Show achievement modal after 3 seconds (demo)\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setAchievementModalOpen(true);\n    }, 3000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen flex bg-slate-50 dark:bg-background\">\n      <Sidebar \n        isOpen={sidebarOpen} \n        onClose={() => setSidebarOpen(false)}\n        onOpenAddTask={() => setAddTaskModalOpen(true)}\n        onOpenAddExpense={() => setAddExpenseModalOpen(true)}\n      />\n      \n      <main className=\"flex-1 lg:ml-64\">\n        <TopBar \n          onToggleSidebar={() => setSidebarOpen(!sidebarOpen)}\n        />\n        \n        <div className=\"p-6\">\n          <Switch>\n            <Route path=\"/\" component={Dashboard} />\n            <Route path=\"/dashboard\" component={Dashboard} />\n            <Route path=\"/expenses\" component={Expenses} />\n            <Route path=\"/study\" component={Study} />\n            <Route path=\"/tasks\" component={Tasks} />\n            <Route path=\"/reports\" component={Reports} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </main>\n\n      <AchievementModal \n        isOpen={achievementModalOpen}\n        onClose={() => setAchievementModalOpen(false)}\n        achievement={{\n          type: \"study_streak\",\n          title: \"Study Streak Master!\",\n          description: \"You've completed 7 days of consistent studying!\"\n        }}\n      />\n\n      <AddTaskModal \n        isOpen={addTaskModalOpen}\n        onClose={() => setAddTaskModalOpen(false)}\n      />\n\n      <AddExpenseModal \n        isOpen={addExpenseModalOpen}\n        onClose={() => setAddExpenseModalOpen(false)}\n      />\n\n      <MotivationPopup \n        isOpen={showMotivation}\n        onClose={closeMotivation}\n        userData={userData}\n      />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <TooltipProvider>\n      <Toaster />\n      <Router />\n    </TooltipProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3279},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(221.15 83.19% 53.33%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(151.84 81.3% 42.75%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(42.55 95.83% 49.8%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(221.15 83.19% 53.33%);\n  --success: hsl(151.84 81.3% 42.75%);\n  --warning: hsl(42.55 95.83% 49.8%);\n  --error: hsl(0 84.2% 60.2%);\n  --chart-1: hsl(142 71% 45%);\n  --chart-2: hsl(43 96% 56%);\n  --chart-3: hsl(0 84% 60%);\n  --chart-4: hsl(262.1 83.3% 57.8%);\n  --chart-5: hsl(173.4 58.1% 39.2%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(0 0% 3.9%);\n  --foreground: hsl(0 0% 98%);\n  --card: hsl(0 0% 3.9%);\n  --card-foreground: hsl(0 0% 98%);\n  --popover: hsl(0 0% 3.9%);\n  --popover-foreground: hsl(0 0% 98%);\n  --primary: hsl(221.15 83.19% 53.33%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(151.84 81.3% 42.75%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(0 0% 14.9%);\n  --muted-foreground: hsl(0 0% 63.9%);\n  --accent: hsl(42.55 95.83% 49.8%);\n  --accent-foreground: hsl(0 0% 100%);\n  --border: hsl(0 0% 14.9%);\n  --input: hsl(0 0% 14.9%);\n  --ring: hsl(221.15 83.19% 53.33%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-slate-50 dark:bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .nav-item {\n    @apply flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors duration-200;\n  }\n\n  .nav-item.active {\n    @apply bg-primary text-white;\n  }\n\n  .nav-item:not(.active) {\n    @apply text-slate-600 hover:bg-slate-100 dark:text-slate-300 dark:hover:bg-slate-800;\n  }\n\n  .stat-card {\n    @apply bg-white dark:bg-card rounded-xl shadow-sm p-6 border border-slate-200 dark:border-border;\n  }\n\n  .chart-container {\n    @apply bg-white dark:bg-card rounded-xl shadow-sm p-6 border border-slate-200 dark:border-border;\n  }\n\n  .modal-overlay {\n    @apply fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50;\n  }\n\n  .modal-content {\n    @apply bg-white dark:bg-card rounded-xl p-6 max-w-md mx-4 w-full;\n  }\n\n  .btn-primary {\n    @apply bg-primary text-primary-foreground px-4 py-2 rounded-lg hover:bg-primary hover:opacity-90 transition-colors;\n  }\n\n  .btn-secondary {\n    @apply bg-secondary text-secondary-foreground px-4 py-2 rounded-lg hover:bg-secondary hover:opacity-90 transition-colors;\n  }\n\n  .btn-accent {\n    @apply bg-accent text-accent-foreground px-4 py-2 rounded-lg hover:bg-accent hover:opacity-90 transition-colors;\n  }\n}\n","size_bytes":3258},"client/src/main.tsx":{"content":"import React, { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </StrictMode>\n);\n","size_bytes":423},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-motivation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useProductivityData } from \"./use-productivity-data\";\n\ninterface MotivationState {\n  showPopup: boolean;\n  lastShown: number;\n  interval: number; // in minutes\n}\n\nexport function useMotivation() {\n  const { data } = useProductivityData();\n  const [motivationState, setMotivationState] = useState<MotivationState>({\n    showPopup: false,\n    lastShown: 0,\n    interval: 30, // Show every 30 minutes\n  });\n\n  useEffect(() => {\n    const checkMotivation = () => {\n      const now = Date.now();\n      const timeSinceLastShown = now - motivationState.lastShown;\n      const intervalMs = motivationState.interval * 60 * 1000;\n\n      // Show motivation popup if enough time has passed\n      if (timeSinceLastShown >= intervalMs) {\n        setMotivationState(prev => ({\n          ...prev,\n          showPopup: true,\n          lastShown: now,\n        }));\n      }\n    };\n\n    // Initial delay of 30 seconds for demo, then check every minute\n    const initialTimeout = setTimeout(checkMotivation, 30 * 1000);\n    const intervalId = setInterval(checkMotivation, 60 * 1000);\n\n    return () => {\n      clearTimeout(initialTimeout);\n      clearInterval(intervalId);\n    };\n  }, [motivationState.interval]);\n\n  const closeMotivation = () => {\n    setMotivationState(prev => ({\n      ...prev,\n      showPopup: false,\n    }));\n  };\n\n  const setMotivationInterval = (minutes: number) => {\n    setMotivationState(prev => ({\n      ...prev,\n      interval: minutes,\n    }));\n  };\n\n  return {\n    showMotivation: motivationState.showPopup,\n    closeMotivation,\n    setMotivationInterval,\n    userData: data,\n  };\n}","size_bytes":1646},"client/src/hooks/use-productivity-data.tsx":{"content":"import { useState, useEffect } from \"react\";\n\ninterface ProductivityData {\n  tasks: {\n    completed: number;\n    total: number;\n    completionRate: number;\n  };\n  study: {\n    hoursToday: number;\n    targetHours: number;\n    streak: number;\n  };\n  expenses: {\n    monthlyTotal: number;\n    budget: number;\n    categories: Array<{\n      name: string;\n      amount: number;\n      percentage: number;\n    }>;\n  };\n  productivity: {\n    score: number;\n    trend: number;\n  };\n}\n\nexport function useProductivityData() {\n  const [data, setData] = useState<ProductivityData>({\n    tasks: {\n      completed: 8,\n      total: 12,\n      completionRate: 67,\n    },\n    study: {\n      hoursToday: 4.5,\n      targetHours: 6,\n      streak: 7,\n    },\n    expenses: {\n      monthlyTotal: 1234,\n      budget: 2000,\n      categories: [\n        { name: \"Food\", amount: 400, percentage: 32 },\n        { name: \"Transport\", amount: 200, percentage: 16 },\n        { name: \"Entertainment\", amount: 150, percentage: 12 },\n        { name: \"Shopping\", amount: 300, percentage: 24 },\n        { name: \"Bills\", amount: 184, percentage: 16 },\n      ],\n    },\n    productivity: {\n      score: 87,\n      trend: 5,\n    },\n  });\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const refreshData = async () => {\n    setIsLoading(true);\n    // TODO: Implement API call to Google Sheets\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    refreshData();\n  }, []);\n\n  return {\n    data,\n    isLoading,\n    refreshData,\n  };\n}\n","size_bytes":1585},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/mockData.ts":{"content":"// Mock data for frontend-only version\nexport interface User {\n  id: string;\n  username: string;\n  streak: number;\n}\n\nexport interface Task {\n  id: string;\n  userId: string;\n  title: string;\n  description?: string;\n  priority: \"low\" | \"medium\" | \"high\";\n  estimatedTime?: string;\n  status: \"todo\" | \"progress\" | \"done\";\n  completedAt?: Date;\n  createdAt: Date;\n}\n\nexport interface Expense {\n  id: string;\n  userId: string;\n  description: string;\n  amount: number;\n  category: string;\n  date: Date;\n}\n\nexport interface StudySession {\n  id: string;\n  userId: string;\n  subject: string;\n  duration: number; // in minutes\n  date: Date;\n}\n\nexport interface Achievement {\n  id: string;\n  userId: string;\n  type: string;\n  title: string;\n  description: string;\n  unlockedAt: Date;\n}\n\n// Mock current user\nexport const mockUser: User = {\n  id: \"user-1\",\n  username: \"john_doe\",\n  streak: 7\n};\n\n// Mock tasks data\nexport const mockTasks: Task[] = [\n  {\n    id: \"task-1\",\n    userId: \"user-1\",\n    title: \"Complete React project\",\n    description: \"Finish the productivity dashboard application\",\n    priority: \"high\",\n    estimatedTime: \"4 hours\",\n    status: \"progress\",\n    createdAt: new Date(\"2024-01-15T09:00:00Z\")\n  },\n  {\n    id: \"task-2\",\n    userId: \"user-1\",\n    title: \"Study JavaScript ES6\",\n    description: \"Review arrow functions, destructuring, and modules\",\n    priority: \"medium\",\n    estimatedTime: \"2 hours\",\n    status: \"done\",\n    completedAt: new Date(\"2024-01-15T11:30:00Z\"),\n    createdAt: new Date(\"2024-01-15T08:00:00Z\")\n  },\n  {\n    id: \"task-3\",\n    userId: \"user-1\",\n    title: \"Read programming book\",\n    description: \"Continue reading Clean Code by Robert Martin\",\n    priority: \"low\",\n    estimatedTime: \"1 hour\",\n    status: \"todo\",\n    createdAt: new Date(\"2024-01-15T10:00:00Z\")\n  },\n  {\n    id: \"task-4\",\n    userId: \"user-1\",\n    title: \"Review TypeScript concepts\",\n    description: \"Go through interfaces and generics\",\n    priority: \"medium\",\n    estimatedTime: \"3 hours\",\n    status: \"todo\",\n    createdAt: new Date(\"2024-01-15T12:00:00Z\")\n  },\n  {\n    id: \"task-5\",\n    userId: \"user-1\",\n    title: \"Plan weekly goals\",\n    description: \"Set priorities and objectives for next week\",\n    priority: \"high\",\n    estimatedTime: \"1 hour\",\n    status: \"progress\",\n    createdAt: new Date(\"2024-01-15T14:00:00Z\")\n  }\n];\n\n// Mock expenses data\nexport const mockExpenses: Expense[] = [\n  {\n    id: \"expense-1\",\n    userId: \"user-1\",\n    description: \"Coffee and snacks\",\n    amount: 15.50,\n    category: \"Food\",\n    date: new Date(\"2024-01-15T09:30:00Z\")\n  },\n  {\n    id: \"expense-2\",\n    userId: \"user-1\",\n    description: \"Programming course subscription\",\n    amount: 29.99,\n    category: \"Education\",\n    date: new Date(\"2024-01-14T10:00:00Z\")\n  },\n  {\n    id: \"expense-3\",\n    userId: \"user-1\",\n    description: \"Lunch\",\n    amount: 12.75,\n    category: \"Food\",\n    date: new Date(\"2024-01-14T13:15:00Z\")\n  },\n  {\n    id: \"expense-4\",\n    userId: \"user-1\",\n    description: \"Transportation\",\n    amount: 8.50,\n    category: \"Transport\",\n    date: new Date(\"2024-01-13T08:45:00Z\")\n  },\n  {\n    id: \"expense-5\",\n    userId: \"user-1\",\n    description: \"Software license\",\n    amount: 99.99,\n    category: \"Tools\",\n    date: new Date(\"2024-01-12T16:20:00Z\")\n  }\n];\n\n// Mock study sessions data\nexport const mockStudySessions: StudySession[] = [\n  {\n    id: \"study-1\",\n    userId: \"user-1\",\n    subject: \"React\",\n    duration: 120,\n    date: new Date(\"2024-01-15T09:00:00Z\")\n  },\n  {\n    id: \"study-2\",\n    userId: \"user-1\",\n    subject: \"JavaScript\",\n    duration: 90,\n    date: new Date(\"2024-01-14T14:00:00Z\")\n  },\n  {\n    id: \"study-3\",\n    userId: \"user-1\",\n    subject: \"TypeScript\",\n    duration: 75,\n    date: new Date(\"2024-01-14T10:30:00Z\")\n  },\n  {\n    id: \"study-4\",\n    userId: \"user-1\",\n    subject: \"CSS\",\n    duration: 60,\n    date: new Date(\"2024-01-13T15:45:00Z\")\n  },\n  {\n    id: \"study-5\",\n    userId: \"user-1\",\n    subject: \"Node.js\",\n    duration: 105,\n    date: new Date(\"2024-01-12T11:00:00Z\")\n  }\n];\n\n// Mock achievements data\nexport const mockAchievements: Achievement[] = [\n  {\n    id: \"achievement-1\",\n    userId: \"user-1\",\n    type: \"streak\",\n    title: \"Week Warrior\",\n    description: \"Maintained a 7-day productivity streak\",\n    unlockedAt: new Date(\"2024-01-15T18:00:00Z\")\n  },\n  {\n    id: \"achievement-2\",\n    userId: \"user-1\",\n    type: \"tasks\",\n    title: \"Task Master\",\n    description: \"Completed 50 tasks\",\n    unlockedAt: new Date(\"2024-01-10T12:00:00Z\")\n  },\n  {\n    id: \"achievement-3\",\n    userId: \"user-1\",\n    type: \"study\",\n    title: \"Study Champion\",\n    description: \"Studied for 10 hours in one week\",\n    unlockedAt: new Date(\"2024-01-08T16:30:00Z\")\n  }\n];\n\n// Helper functions to simulate API calls with promises\nexport const mockApi = {\n  // User methods\n  getUser: (): Promise<User> => \n    new Promise(resolve => setTimeout(() => resolve(mockUser), 100)),\n\n  // Task methods\n  getTasks: (): Promise<Task[]> => \n    new Promise(resolve => setTimeout(() => resolve(mockTasks), 100)),\n  \n  createTask: (task: Omit<Task, 'id' | 'userId' | 'createdAt'>): Promise<Task> => \n    new Promise(resolve => {\n      const newTask: Task = {\n        ...task,\n        id: `task-${Date.now()}`,\n        userId: mockUser.id,\n        createdAt: new Date()\n      };\n      mockTasks.push(newTask);\n      setTimeout(() => resolve(newTask), 100);\n    }),\n\n  updateTask: (id: string, updates: Partial<Task>): Promise<Task> => \n    new Promise(resolve => {\n      const taskIndex = mockTasks.findIndex(t => t.id === id);\n      if (taskIndex !== -1) {\n        mockTasks[taskIndex] = { ...mockTasks[taskIndex], ...updates };\n        setTimeout(() => resolve(mockTasks[taskIndex]), 100);\n      }\n    }),\n\n  deleteTask: (id: string): Promise<void> => \n    new Promise(resolve => {\n      const taskIndex = mockTasks.findIndex(t => t.id === id);\n      if (taskIndex !== -1) {\n        mockTasks.splice(taskIndex, 1);\n      }\n      setTimeout(() => resolve(), 100);\n    }),\n\n  // Expense methods\n  getExpenses: (): Promise<Expense[]> => \n    new Promise(resolve => setTimeout(() => resolve(mockExpenses), 100)),\n  \n  createExpense: (expense: Omit<Expense, 'id' | 'userId' | 'date'>): Promise<Expense> => \n    new Promise(resolve => {\n      const newExpense: Expense = {\n        ...expense,\n        id: `expense-${Date.now()}`,\n        userId: mockUser.id,\n        date: new Date()\n      };\n      mockExpenses.push(newExpense);\n      setTimeout(() => resolve(newExpense), 100);\n    }),\n\n  deleteExpense: (id: string): Promise<void> => \n    new Promise(resolve => {\n      const expenseIndex = mockExpenses.findIndex(e => e.id === id);\n      if (expenseIndex !== -1) {\n        mockExpenses.splice(expenseIndex, 1);\n      }\n      setTimeout(() => resolve(), 100);\n    }),\n\n  // Study session methods\n  getStudySessions: (): Promise<StudySession[]> => \n    new Promise(resolve => setTimeout(() => resolve(mockStudySessions), 100)),\n  \n  createStudySession: (session: Omit<StudySession, 'id' | 'userId' | 'date'>): Promise<StudySession> => \n    new Promise(resolve => {\n      const newSession: StudySession = {\n        ...session,\n        id: `study-${Date.now()}`,\n        userId: mockUser.id,\n        date: new Date()\n      };\n      mockStudySessions.push(newSession);\n      setTimeout(() => resolve(newSession), 100);\n    }),\n\n  // Achievement methods\n  getAchievements: (): Promise<Achievement[]> => \n    new Promise(resolve => setTimeout(() => resolve(mockAchievements), 100))\n};","size_bytes":7527},"client/src/lib/motivation.ts":{"content":"export const motivationalQuotes = [\n  \"The only way to do great work is to love what you do. - Steve Jobs\",\n  \"Success is not final, failure is not fatal: it is the courage to continue that counts. - Winston Churchill\",\n  \"The future belongs to those who believe in the beauty of their dreams. - Eleanor Roosevelt\",\n  \"It is during our darkest moments that we must focus to see the light. - Aristotle\",\n  \"The only impossible journey is the one you never begin. - Tony Robbins\",\n  \"In the middle of difficulty lies opportunity. - Albert Einstein\",\n  \"Believe you can and you're halfway there. - Theodore Roosevelt\",\n  \"Don't watch the clock; do what it does. Keep going. - Sam Levenson\",\n];\n\nexport const achievements = [\n  {\n    id: \"first_task\",\n    title: \"Getting Started!\",\n    description: \"You completed your first task\",\n    icon: \"🎯\",\n    trigger: \"task_completed\",\n    condition: (count: number) => count === 1,\n  },\n  {\n    id: \"study_streak_3\",\n    title: \"Study Streak Beginner\",\n    description: \"3 days of consistent studying\",\n    icon: \"🔥\",\n    trigger: \"study_streak\",\n    condition: (days: number) => days === 3,\n  },\n  {\n    id: \"study_streak_7\",\n    title: \"Study Streak Master\",\n    description: \"7 days of consistent studying\",\n    icon: \"🏆\",\n    trigger: \"study_streak\", \n    condition: (days: number) => days === 7,\n  },\n  {\n    id: \"budget_saver\",\n    title: \"Budget Saver\",\n    description: \"Stayed under budget this month\",\n    icon: \"💰\",\n    trigger: \"budget_check\",\n    condition: (percentage: number) => percentage < 90,\n  },\n  {\n    id: \"productive_week\",\n    title: \"Productivity Champion\",\n    description: \"Achieved 90%+ productivity this week\",\n    icon: \"⚡\",\n    trigger: \"productivity_check\",\n    condition: (score: number) => score >= 90,\n  },\n];\n\nexport function getRandomQuote(): string {\n  return motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)];\n}\n\nexport function checkAchievements(data: any): typeof achievements[0] | null {\n  // TODO: Implement achievement checking logic\n  // This would check if any new achievements should be unlocked\n  // based on the current user data\n  \n  for (const achievement of achievements) {\n    // Example logic - would need to be expanded based on actual data structure\n    if (achievement.trigger === \"study_streak\" && data.study?.streak) {\n      if (achievement.condition(data.study.streak)) {\n        return achievement;\n      }\n    }\n  }\n  \n  return null;\n}\n\nexport function generateMotivationalMessage(data: any): string {\n  const { tasks, study, productivity } = data;\n  \n  if (tasks?.completionRate >= 80) {\n    return \"🎉 Amazing job on your task completion rate! You're crushing it!\";\n  }\n  \n  if (study?.streak >= 5) {\n    return `🔥 ${study.streak} day study streak! Your consistency is inspiring!`;\n  }\n  \n  if (productivity?.score >= 85) {\n    return \"⚡ Your productivity is through the roof! Keep up the excellent work!\";\n  }\n  \n  return getRandomQuote();\n}\n","size_bytes":2993},"client/src/lib/queryClient.ts":{"content":"import { QueryClient } from \"@tanstack/react-query\";\nimport { mockApi } from \"./mockData\";\n\n// Mock API request function for frontend-only version\nexport async function apiRequest(\n  method: string,\n  endpoint: string,\n  data?: unknown\n): Promise<any> {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 100));\n  \n  // Route to appropriate mock API methods based on endpoint and method\n  if (endpoint === \"/api/user\" && method === \"GET\") {\n    return { json: () => mockApi.getUser() };\n  }\n  \n  if (endpoint === \"/api/tasks\") {\n    if (method === \"GET\") return { json: () => mockApi.getTasks() };\n    if (method === \"POST\") return { json: () => mockApi.createTask(data as any) };\n  }\n  \n  if (endpoint.startsWith(\"/api/tasks/\") && method === \"PATCH\") {\n    const id = endpoint.split(\"/\")[3];\n    return { json: () => mockApi.updateTask(id, data as any) };\n  }\n  \n  if (endpoint.startsWith(\"/api/tasks/\") && method === \"DELETE\") {\n    const id = endpoint.split(\"/\")[3];\n    return { json: () => mockApi.deleteTask(id) };\n  }\n  \n  if (endpoint === \"/api/expenses\") {\n    if (method === \"GET\") return { json: () => mockApi.getExpenses() };\n    if (method === \"POST\") return { json: () => mockApi.createExpense(data as any) };\n  }\n  \n  if (endpoint.startsWith(\"/api/expenses/\") && method === \"DELETE\") {\n    const id = endpoint.split(\"/\")[3];\n    return { json: () => mockApi.deleteExpense(id) };\n  }\n  \n  if (endpoint === \"/api/study-sessions\") {\n    if (method === \"GET\") return { json: () => mockApi.getStudySessions() };\n    if (method === \"POST\") return { json: () => mockApi.createStudySession(data as any) };\n  }\n  \n  if (endpoint === \"/api/achievements\" && method === \"GET\") {\n    return { json: () => mockApi.getAchievements() };\n  }\n  \n  throw new Error(`Unknown endpoint: ${method} ${endpoint}`);\n}\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2106},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport StudyProgressChart from \"@/components/charts/study-progress-chart\";\nimport ExpenseChart from \"@/components/charts/expense-chart\";\nimport TaskCompletionChart from \"@/components/charts/task-completion-chart\";\nimport WeeklyOverviewChart from \"@/components/charts/weekly-overview-chart\";\nimport { \n  CheckSquare, \n  Book, \n  Wallet, \n  TrendingUp,\n  ArrowUp,\n  CheckCircle,\n  Plus,\n  DollarSign,\n  Trophy\n} from \"lucide-react\";\n\nexport default function Dashboard() {\n  const stats = {\n    todayTasks: { completed: 8, total: 12 },\n    studyHours: 4.5,\n    studyChange: 1.2,\n    expenses: 1234,\n    expenseChange: 123,\n    productivityScore: 87,\n    productivityChange: 5\n  };\n\n  const recentActivities = [\n    {\n      id: 1,\n      type: \"task\",\n      icon: CheckCircle,\n      title: 'Completed \"React Hooks Study\"',\n      time: \"2 hours ago\",\n      color: \"text-secondary\"\n    },\n    {\n      id: 2,\n      type: \"expense\",\n      icon: DollarSign,\n      title: \"Added expense: Groceries ($45)\",\n      time: \"4 hours ago\",\n      color: \"text-accent\"\n    },\n    {\n      id: 3,\n      type: \"task\",\n      icon: Plus,\n      title: 'Created task: \"Review JavaScript concepts\"',\n      time: \"6 hours ago\",\n      color: \"text-primary\"\n    }\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"stat-card\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-slate-600 dark:text-muted-foreground text-sm font-medium\">\n                  Today's Tasks\n                </p>\n                <p className=\"text-2xl font-bold text-slate-800 dark:text-foreground\">\n                  {stats.todayTasks.completed}/{stats.todayTasks.total}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <CheckSquare className=\"h-6 w-6 text-primary\" />\n              </div>\n            </div>\n            <div className=\"mt-4\">\n              <Progress \n                value={(stats.todayTasks.completed / stats.todayTasks.total) * 100} \n                className=\"h-2\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"stat-card\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-slate-600 dark:text-muted-foreground text-sm font-medium\">\n                  Study Hours\n                </p>\n                <p className=\"text-2xl font-bold text-slate-800 dark:text-foreground\">\n                  {stats.studyHours}h\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                <Book className=\"h-6 w-6 text-secondary\" />\n              </div>\n            </div>\n            <p className=\"text-sm text-secondary mt-2\">\n              <ArrowUp className=\"inline w-3 h-3 mr-1\" />\n              +{stats.studyChange}h from yesterday\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"stat-card\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-slate-600 dark:text-muted-foreground text-sm font-medium\">\n                  Monthly Expenses\n                </p>\n                <p className=\"text-2xl font-bold text-slate-800 dark:text-foreground\">\n                  ${stats.expenses}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                <Wallet className=\"h-6 w-6 text-accent\" />\n              </div>\n            </div>\n            <p className=\"text-sm text-error mt-2\">\n              <ArrowUp className=\"inline w-3 h-3 mr-1\" />\n              +${stats.expenseChange} from last month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"stat-card\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-slate-600 dark:text-muted-foreground text-sm font-medium\">\n                  Productivity Score\n                </p>\n                <p className=\"text-2xl font-bold text-slate-800 dark:text-foreground\">\n                  {stats.productivityScore}%\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-success/10 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"h-6 w-6 text-success\" />\n              </div>\n            </div>\n            <p className=\"text-sm text-success mt-2\">\n              <ArrowUp className=\"inline w-3 h-3 mr-1\" />\n              +{stats.productivityChange}% from last week\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts Row 1 */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"chart-container\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n              Weekly Study Progress\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <StudyProgressChart />\n          </CardContent>\n        </Card>\n\n        <Card className=\"chart-container\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n              Expense Categories\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ExpenseChart />\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts Row 2 */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"chart-container\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n              Task Completion Overview\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <TaskCompletionChart />\n          </CardContent>\n        </Card>\n\n        <Card className=\"chart-container\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n              Weekly Activity Overview\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <WeeklyOverviewChart />\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity & Achievement */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <Card className=\"lg:col-span-2 chart-container\">\n          <CardHeader>\n            <CardTitle>Recent Activity</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {recentActivities.map((activity) => {\n                const Icon = activity.icon;\n                return (\n                  <div \n                    key={activity.id}\n                    className=\"flex items-center space-x-4 p-3 rounded-lg hover:bg-slate-50 dark:hover:bg-slate-800 transition-colors\"\n                    data-testid={`activity-${activity.id}`}\n                  >\n                    <div className=\"w-10 h-10 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                      <Icon className={`h-5 w-5 ${activity.color}`} />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium text-slate-800 dark:text-foreground\">\n                        {activity.title}\n                      </p>\n                      <p className=\"text-sm text-slate-600 dark:text-muted-foreground\">\n                        {activity.time}\n                      </p>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"chart-container\">\n          <CardHeader>\n            <CardTitle>Achievement</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"p-4 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg text-white\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <Trophy className=\"h-5 w-5 text-yellow-300\" />\n                <span className=\"font-medium\">Achievement</span>\n              </div>\n              <p className=\"text-sm font-medium\">Study Streak Master!</p>\n              <p className=\"text-xs opacity-90\">7 days of consistent studying</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9117},"client/src/pages/expenses.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport SpendingTrendChart from \"@/components/charts/spending-trend-chart\";\nimport { Plus, Edit, Trash2, X } from \"lucide-react\";\n\ninterface Expense {\n  id: number;\n  date: string;\n  description: string;\n  category: string;\n  amount: number;\n}\n\ninterface FormData {\n  date: string;\n  description: string;\n  category: string;\n  amount: string;\n}\n\ninterface Budget {\n  total: number;\n  spent: number;\n  remaining: number;\n}\n\nexport default function Expenses(): JSX.Element {\n  const [expenses, setExpenses] = useState<Expense[]>([\n    {\n      id: 1,\n      date: \"Dec 15, 2023\",\n      description: \"Grocery Shopping\",\n      category: \"Food\",\n      amount: 45.99,\n    },\n    {\n      id: 2,\n      date: \"Dec 14, 2023\", \n      description: \"Gas Station\",\n      category: \"Transport\",\n      amount: 32.50,\n    },\n    {\n      id: 3,\n      date: \"Dec 13, 2023\",\n      description: \"Netflix Subscription\",\n      category: \"Entertainment\",\n      amount: 15.99,\n    },\n    {\n      id: 4,\n      date: \"Dec 12, 2023\",\n      description: \"Coffee Shop\",\n      category: \"Food\",\n      amount: 8.75,\n    },\n  ]);\n\n  const [showForm, setShowForm] = useState<boolean>(false);\n  const [formData, setFormData] = useState<FormData>({\n    date: \"\",\n    description: \"\",\n    category: \"\",\n    amount: \"\"\n  });\n\n  const budget: Budget = {\n    total: 2000,\n    spent: 1234,\n    remaining: 766,\n  };\n\n  const categories: string[] = [\"Food\", \"Transport\", \"Entertainment\", \"Shopping\", \"Bills\"];\n\n  const getCategoryColor = (category: string): string => {\n    const colors: { [key: string]: string } = {\n      Food: \"bg-green-100 text-green-700\",\n      Transport: \"bg-yellow-100 text-yellow-700\",\n      Entertainment: \"bg-purple-100 text-purple-700\",\n      Shopping: \"bg-blue-100 text-blue-700\",\n      Bills: \"bg-red-100 text-red-700\",\n    };\n    return colors[category] || \"bg-slate-100 text-slate-700\";\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>): void => {\n    const { name, value } = e.target;\n    setFormData((prev: FormData) => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    \n    if (!formData.date || !formData.description || !formData.category || !formData.amount) {\n      alert(\"Please fill in all fields\");\n      return;\n    }\n\n    const newExpense: Expense = {\n      id: expenses.length + 1,\n      date: new Date(formData.date).toLocaleDateString('en-US', { \n        year: 'numeric', \n        month: 'short', \n        day: 'numeric' \n      }),\n      description: formData.description,\n      category: formData.category,\n      amount: parseFloat(formData.amount),\n    };\n\n    setExpenses((prev: Expense[]) => [newExpense, ...prev]);\n    setFormData({ date: \"\", description: \"\", category: \"\", amount: \"\" });\n    setShowForm(false);\n  };\n\n  const handleCancel = (): void => {\n    setFormData({ date: \"\", description: \"\", category: \"\", amount: \"\" });\n    setShowForm(false);\n  };\n\n  const handleDeleteExpense = (id: number): void => {\n    setExpenses((prev: Expense[]) => prev.filter(expense => expense.id !== id));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center\">\n        <h2 className=\"text-2xl font-bold text-slate-800 dark:text-foreground\">\n          Expense Tracker\n        </h2>\n        <Button \n          className=\"mt-4 sm:mt-0\"\n          data-testid=\"button-add-expense\"\n          onClick={() => setShowForm(true)}\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Expense\n        </Button>\n      </div>\n\n      {/* Add Expense Form Modal */}\n      {showForm && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-white dark:bg-slate-800 rounded-lg shadow-xl w-full max-w-md\">\n            <div className=\"flex justify-between items-center p-6 border-b border-slate-200 dark:border-slate-700\">\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-foreground\">\n                Add New Expense\n              </h3>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleCancel}\n                className=\"text-slate-500 hover:text-slate-700\"\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            \n            <form onSubmit={handleSubmit} className=\"p-6 space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                  Date\n                </label>\n                <input\n                  type=\"date\"\n                  name=\"date\"\n                  value={formData.date}\n                  onChange={handleInputChange}\n                  className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-slate-700 dark:border-slate-600 dark:text-foreground\"\n                  required\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                  Description\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"description\"\n                  value={formData.description}\n                  onChange={handleInputChange}\n                  placeholder=\"Enter expense description\"\n                  className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-slate-700 dark:border-slate-600 dark:text-foreground\"\n                  required\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                  Category\n                </label>\n                <select\n                  name=\"category\"\n                  value={formData.category}\n                  onChange={handleInputChange}\n                  className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-slate-700 dark:border-slate-600 dark:text-foreground\"\n                  required\n                >\n                  <option value=\"\">Select a category</option>\n                  {categories.map((category: string) => (\n                    <option key={category} value={category}>\n                      {category}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                  Amount\n                </label>\n                <input\n                  type=\"number\"\n                  name=\"amount\"\n                  value={formData.amount}\n                  onChange={handleInputChange}\n                  placeholder=\"0.00\"\n                  step=\"0.01\"\n                  min=\"0\"\n                  className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-slate-700 dark:border-slate-600 dark:text-foreground\"\n                  required\n                />\n              </div>\n\n              <div className=\"flex space-x-3 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  onClick={handleCancel}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  className=\"flex-1\"\n                >\n                  Add Expense\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <Card className=\"stat-card\">\n          <CardHeader>\n            <CardTitle>Monthly Budget</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-slate-600 dark:text-muted-foreground\">Total Budget</span>\n                <span className=\"font-semibold\" data-testid=\"text-total-budget\">\n                  ${budget.total}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-slate-600 dark:text-muted-foreground\">Spent</span>\n                <span className=\"font-semibold text-error\" data-testid=\"text-spent\">\n                  ${budget.spent}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-slate-600 dark:text-muted-foreground\">Remaining</span>\n                <span className=\"font-semibold text-success\" data-testid=\"text-remaining\">\n                  ${budget.remaining}\n                </span>\n              </div>\n              <Progress \n                value={(budget.spent / budget.total) * 100} \n                className=\"h-3\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"lg:col-span-2 chart-container\">\n          <CardHeader>\n            <CardTitle>Spending Trends</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <SpendingTrendChart />\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card className=\"chart-container\">\n        <CardHeader>\n          <CardTitle>Recent Expenses</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-slate-50 dark:bg-slate-800\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\n                    Date\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\n                    Description\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\n                    Category\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\n                    Amount\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white dark:bg-card divide-y divide-slate-200 dark:divide-slate-700\">\n                {expenses.map((expense: Expense) => (\n                  <tr key={expense.id} data-testid={`expense-row-${expense.id}`}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-slate-900 dark:text-foreground\">\n                      {expense.date}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-slate-900 dark:text-foreground\">\n                      {expense.description}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getCategoryColor(expense.category)}`}>\n                        {expense.category}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-slate-900 dark:text-foreground\">\n                      ${expense.amount}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-slate-500 dark:text-slate-400\">\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        className=\"text-primary hover:text-primary/80 mr-3\"\n                        data-testid={`button-edit-expense-${expense.id}`}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        className=\"text-error hover:text-error/80\"\n                        data-testid={`button-delete-expense-${expense.id}`}\n                        onClick={() => handleDeleteExpense(expense.id)}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13435},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport TaskCompletionChart from \"@/components/charts/task-completion-chart\";\nimport ProductivityTrendsChart from \"@/components/charts/productivity-trends-chart\";\nimport { Download } from \"lucide-react\";\n\nexport default function Reports() {\n  const [period, setPeriod] = useState(\"7days\");\n\n  const handleExportReport = () => {\n    // TODO: Implement report export\n    console.log(\"Exporting report...\");\n  };\n\n  const studyDistribution = [\n    { name: \"Morning\", value: 30, color: \"#06b6d4\" },\n    { name: \"Afternoon\", value: 25, color: \"#10b981\" },\n    { name: \"Evening\", value: 35, color: \"#f59e0b\" },\n    { name: \"Night\", value: 10, color: \"#8b5cf6\" },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center\">\n        <h2 className=\"text-2xl font-bold text-slate-800 dark:text-foreground\">\n          Progress Reports\n        </h2>\n        <div className=\"flex space-x-3 mt-4 sm:mt-0\">\n          <Select value={period} onValueChange={setPeriod}>\n            <SelectTrigger className=\"w-[150px]\" data-testid=\"select-period\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"7days\">Last 7 days</SelectItem>\n              <SelectItem value=\"30days\">Last 30 days</SelectItem>\n              <SelectItem value=\"3months\">Last 3 months</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button \n            onClick={handleExportReport}\n            data-testid=\"button-export\"\n          >\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"chart-container\">\n          <CardHeader>\n            <CardTitle>Task Completion Rate</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <TaskCompletionChart />\n          </CardContent>\n        </Card>\n\n        <Card className=\"chart-container\">\n          <CardHeader>\n            <CardTitle>Study Time Distribution</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {studyDistribution.map((item) => (\n                <div key={item.name} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div \n                      className=\"w-4 h-4 rounded-full\"\n                      style={{ backgroundColor: item.color }}\n                    />\n                    <span className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">\n                      {item.name}\n                    </span>\n                  </div>\n                  <span className=\"text-sm text-slate-600 dark:text-muted-foreground\">\n                    {item.value}%\n                  </span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card className=\"chart-container\">\n        <CardHeader>\n          <CardTitle>Productivity Trends</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ProductivityTrendsChart />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3528},"client/src/pages/study.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Play, Pause, Code, Database, Plus, Edit, Trash2, X, Clock, BookOpen } from \"lucide-react\";\n\ninterface StudyRoutine {\n  id: number;\n  subject: string;\n  startTime: string;\n  endTime: string;\n  duration: number; // in minutes\n  day: string;\n  icon: string;\n  color: string;\n  bgColor: string;\n}\n\ninterface RoutineFormData {\n  subject: string;\n  startTime: string;\n  endTime: string;\n  day: string;\n  icon: string;\n  color: string;\n  bgColor: string;\n}\n\nexport default function Study(): JSX.Element {\n  const [isStudying, setIsStudying] = useState<boolean>(false);\n  const [showRoutineForm, setShowRoutineForm] = useState<boolean>(false);\n  const [editingRoutine, setEditingRoutine] = useState<StudyRoutine | null>(null);\n  const [currentSession, setCurrentSession] = useState({\n    subject: \"\",\n    elapsed: 0,\n    target: 360, // 6 hours in minutes\n  });\n\n  const [studyRoutines, setStudyRoutines] = useState<StudyRoutine[]>([\n    {\n      id: 1,\n      subject: \"JavaScript\",\n      startTime: \"09:00\",\n      endTime: \"11:00\",\n      duration: 120,\n      day: \"Monday\",\n      icon: \"Code\",\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-100\",\n    },\n    {\n      id: 2,\n      subject: \"Database Design\",\n      startTime: \"14:00\",\n      endTime: \"16:30\",\n      duration: 150,\n      day: \"Monday\",\n      icon: \"Database\",\n      color: \"text-green-600\",\n      bgColor: \"bg-green-100\",\n    },\n    {\n      id: 3,\n      subject: \"React\",\n      startTime: \"10:00\",\n      endTime: \"12:00\",\n      duration: 120,\n      day: \"Tuesday\",\n      icon: \"Code\",\n      color: \"text-purple-600\",\n      bgColor: \"bg-purple-100\",\n    },\n  ]);\n\n  const [routineFormData, setRoutineFormData] = useState<RoutineFormData>({\n    subject: \"\",\n    startTime: \"\",\n    endTime: \"\",\n    day: \"\",\n    icon: \"BookOpen\",\n    color: \"text-blue-600\",\n    bgColor: \"bg-blue-100\",\n  });\n\n  const studyData = {\n    todayHours: 4.5,\n    targetHours: 6,\n    subjects: [\n      {\n        id: 1,\n        name: \"JavaScript\",\n        icon: Code,\n        todayTime: 2.5,\n        color: \"text-primary\",\n        bgColor: \"bg-primary/10\",\n      },\n      {\n        id: 2,\n        name: \"Database Design\", \n        icon: Database,\n        todayTime: 1.2,\n        color: \"text-secondary\",\n        bgColor: \"bg-secondary/10\",\n      },\n    ],\n  };\n\n  const weeklyData = [\n    { day: \"Mon\", hours: 2 },\n    { day: \"Tue\", hours: 4 },\n    { day: \"Wed\", hours: 3 },\n    { day: \"Thu\", hours: 5 },\n    { day: \"Fri\", hours: 4 },\n    { day: \"Sat\", hours: 6 },\n    { day: \"Sun\", hours: 4.5 },\n  ];\n\n  const days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n  const iconOptions = [\"BookOpen\", \"Code\", \"Database\", \"Play\"];\n  const colorOptions = [\n    { color: \"text-blue-600\", bgColor: \"bg-blue-100\" },\n    { color: \"text-green-600\", bgColor: \"bg-green-100\" },\n    { color: \"text-purple-600\", bgColor: \"bg-purple-100\" },\n    { color: \"text-red-600\", bgColor: \"bg-red-100\" },\n    { color: \"text-yellow-600\", bgColor: \"bg-yellow-100\" },\n    { color: \"text-indigo-600\", bgColor: \"bg-indigo-100\" },\n  ];\n\n  const calculateDuration = (startTime: string, endTime: string): number => {\n    const start = new Date(`2000-01-01T${startTime}`);\n    const end = new Date(`2000-01-01T${endTime}`);\n    return Math.floor((end.getTime() - start.getTime()) / (1000 * 60));\n  };\n\n  const formatMinutesToHours = (minutes: number): string => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;\n  };\n\n  const handleStartStudy = (subject?: string): void => {\n    setIsStudying(true);\n    setCurrentSession(prev => ({\n      ...prev,\n      subject: subject || \"General Study\",\n    }));\n  };\n\n  const handlePauseStudy = (): void => {\n    setIsStudying(false);\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>): void => {\n    const { name, value } = e.target;\n    setRoutineFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleColorChange = (colorOption: { color: string; bgColor: string }): void => {\n    setRoutineFormData(prev => ({\n      ...prev,\n      color: colorOption.color,\n      bgColor: colorOption.bgColor\n    }));\n  };\n\n  const handleSubmitRoutine = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    \n    if (!routineFormData.subject || !routineFormData.startTime || !routineFormData.endTime || !routineFormData.day) {\n      alert(\"Please fill in all required fields\");\n      return;\n    }\n\n    const duration = calculateDuration(routineFormData.startTime, routineFormData.endTime);\n    \n    if (duration <= 0) {\n      alert(\"End time must be after start time\");\n      return;\n    }\n\n    if (editingRoutine) {\n      // Update existing routine\n      setStudyRoutines(prev => prev.map(routine => \n        routine.id === editingRoutine.id \n          ? { ...routineFormData, id: editingRoutine.id, duration }\n          : routine\n      ));\n    } else {\n      // Add new routine\n      const newRoutine: StudyRoutine = {\n        id: studyRoutines.length + 1,\n        ...routineFormData,\n        duration,\n      };\n      setStudyRoutines(prev => [...prev, newRoutine]);\n    }\n\n    resetForm();\n  };\n\n  const resetForm = (): void => {\n    setRoutineFormData({\n      subject: \"\",\n      startTime: \"\",\n      endTime: \"\",\n      day: \"\",\n      icon: \"BookOpen\",\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-100\",\n    });\n    setShowRoutineForm(false);\n    setEditingRoutine(null);\n  };\n\n  const handleEditRoutine = (routine: StudyRoutine): void => {\n    setRoutineFormData({\n      subject: routine.subject,\n      startTime: routine.startTime,\n      endTime: routine.endTime,\n      day: routine.day,\n      icon: routine.icon,\n      color: routine.color,\n      bgColor: routine.bgColor,\n    });\n    setEditingRoutine(routine);\n    setShowRoutineForm(true);\n  };\n\n  const handleDeleteRoutine = (id: number): void => {\n    setStudyRoutines(prev => prev.filter(routine => routine.id !== id));\n  };\n\n  const getIconComponent = (iconName: string) => {\n    const icons: { [key: string]: any } = {\n      BookOpen,\n      Code,\n      Database,\n      Play,\n    };\n    return icons[iconName] || BookOpen;\n  };\n\n  const getDayRoutines = (day: string): StudyRoutine[] => {\n    return studyRoutines.filter(routine => routine.day === day);\n  };\n\n  const getTotalDayHours = (day: string): number => {\n    const dayRoutines = getDayRoutines(day);\n    const totalMinutes = dayRoutines.reduce((total, routine) => total + routine.duration, 0);\n    return totalMinutes;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center\">\n        <h2 className=\"text-2xl font-bold text-slate-800 dark:text-foreground\">\n          Study Tracker\n        </h2>\n        <div className=\"flex gap-2 mt-4 sm:mt-0\">\n          <Button \n            className=\"btn-secondary\"\n            onClick={() => setShowRoutineForm(true)}\n            data-testid=\"button-add-routine\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Routine\n          </Button>\n          <Button \n            className=\"btn-secondary\"\n            onClick={() => handleStartStudy()}\n            data-testid=\"button-start-session\"\n          >\n            <Play className=\"w-4 h-4 mr-2\" />\n            Start Session\n          </Button>\n        </div>\n      </div>\n\n      {/* Routine Form Modal */}\n      {showRoutineForm && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-white dark:bg-slate-800 rounded-lg shadow-xl w-full max-w-md max-h-[90vh] overflow-y-auto\">\n            <div className=\"flex justify-between items-center p-6 border-b border-slate-200 dark:border-slate-700\">\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-foreground\">\n                {editingRoutine ? \"Edit Study Routine\" : \"Add Study Routine\"}\n              </h3>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={resetForm}\n                className=\"text-slate-500 hover:text-slate-700\"\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            \n            <form onSubmit={handleSubmitRoutine} className=\"p-6 space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                  Subject *\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"subject\"\n                  value={routineFormData.subject}\n                  onChange={handleInputChange}\n                  placeholder=\"Enter subject name\"\n                  className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-slate-700 dark:border-slate-600 dark:text-foreground\"\n                  required\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                    Start Time *\n                  </label>\n                  <input\n                    type=\"time\"\n                    name=\"startTime\"\n                    value={routineFormData.startTime}\n                    onChange={handleInputChange}\n                    className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-slate-700 dark:border-slate-600 dark:text-foreground\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                    End Time *\n                  </label>\n                  <input\n                    type=\"time\"\n                    name=\"endTime\"\n                    value={routineFormData.endTime}\n                    onChange={handleInputChange}\n                    className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-slate-700 dark:border-slate-600 dark:text-foreground\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                  Day *\n                </label>\n                <select\n                  name=\"day\"\n                  value={routineFormData.day}\n                  onChange={handleInputChange}\n                  className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-slate-700 dark:border-slate-600 dark:text-foreground\"\n                  required\n                >\n                  <option value=\"\">Select a day</option>\n                  {days.map((day: string) => (\n                    <option key={day} value={day}>\n                      {day}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                  Icon\n                </label>\n                <select\n                  name=\"icon\"\n                  value={routineFormData.icon}\n                  onChange={handleInputChange}\n                  className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-slate-700 dark:border-slate-600 dark:text-foreground\"\n                >\n                  {iconOptions.map((icon: string) => (\n                    <option key={icon} value={icon}>\n                      {icon}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                  Color Theme\n                </label>\n                <div className=\"grid grid-cols-3 gap-2\">\n                  {colorOptions.map((colorOption, index) => (\n                    <button\n                      key={index}\n                      type=\"button\"\n                      onClick={() => handleColorChange(colorOption)}\n                      className={`w-full h-10 rounded-md border-2 ${colorOption.bgColor} ${\n                        routineFormData.color === colorOption.color ? 'border-blue-500' : 'border-slate-300'\n                      }`}\n                    >\n                      <div className={`w-4 h-4 rounded-full mx-auto ${colorOption.color.replace('text-', 'bg-')}`}></div>\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              {routineFormData.startTime && routineFormData.endTime && (\n                <div className=\"bg-slate-50 dark:bg-slate-700 p-3 rounded-md\">\n                  <span className=\"text-sm text-slate-600 dark:text-slate-400\">\n                    Duration: {formatMinutesToHours(calculateDuration(routineFormData.startTime, routineFormData.endTime))}\n                  </span>\n                </div>\n              )}\n\n              <div className=\"flex space-x-3 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  onClick={resetForm}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  className=\"flex-1\"\n                >\n                  {editingRoutine ? \"Update Routine\" : \"Add Routine\"}\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"stat-card\">\n          <CardHeader>\n            <CardTitle>Today's Study Session</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center\">\n              <div className=\"w-32 h-32 mx-auto mb-4 relative\">\n                <svg className=\"w-32 h-32 transform -rotate-90\" viewBox=\"0 0 36 36\">\n                  <path \n                    d=\"M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831\" \n                    fill=\"none\" \n                    stroke=\"rgb(226 232 240)\" \n                    strokeWidth=\"2\"\n                  />\n                  <path \n                    d=\"M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831\" \n                    fill=\"none\" \n                    stroke=\"rgb(16 185 129)\" \n                    strokeWidth=\"2\" \n                    strokeDasharray={`${(studyData.todayHours / studyData.targetHours) * 100}, 100`}\n                  />\n                </svg>\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-slate-800 dark:text-foreground\">\n                      {studyData.todayHours}h\n                    </div>\n                    <div className=\"text-sm text-slate-600 dark:text-muted-foreground\">\n                      of {studyData.targetHours}h goal\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <Button \n                variant={isStudying ? \"outline\" : \"default\"}\n                className={isStudying ? \"\" : \"btn-secondary\"}\n                onClick={isStudying ? handlePauseStudy : () => handleStartStudy()}\n                data-testid=\"button-toggle-session\"\n              >\n                {isStudying ? (\n                  <>\n                    <Pause className=\"w-4 h-4 mr-2\" />\n                    Pause Session\n                  </>\n                ) : (\n                  <>\n                    <Play className=\"w-4 h-4 mr-2\" />\n                    Start Session\n                  </>\n                )}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"stat-card\">\n          <CardHeader>\n            <CardTitle>Study Subjects</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {studyData.subjects.map((subject) => {\n                const Icon = subject.icon;\n                return (\n                  <div \n                    key={subject.id}\n                    className=\"flex items-center justify-between p-3 rounded-lg bg-slate-50 dark:bg-slate-800\"\n                    data-testid={`subject-${subject.id}`}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`w-10 h-10 ${subject.bgColor} rounded-lg flex items-center justify-center`}>\n                        <Icon className={`h-5 w-5 ${subject.color}`} />\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-slate-800 dark:text-foreground\">\n                          {subject.name}\n                        </p>\n                        <p className=\"text-sm text-slate-600 dark:text-muted-foreground\">\n                          {subject.todayTime}h today\n                        </p>\n                      </div>\n                    </div>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      className=\"text-primary hover:text-primary/80\"\n                      onClick={() => handleStartStudy(subject.name)}\n                      data-testid={`button-start-${subject.name.toLowerCase().replace(' ', '-')}`}\n                    >\n                      <Play className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Study Routine Table */}\n      <Card className=\"chart-container\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Clock className=\"w-5 h-5 mr-2\" />\n            Study Routine Table\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-slate-50 dark:bg-slate-800\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\n                    Subject\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\n                    Day\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\n                    Time\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\n                    Duration\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white dark:bg-card divide-y divide-slate-200 dark:divide-slate-700\">\n                {studyRoutines.map((routine: StudyRoutine) => {\n                  const IconComponent = getIconComponent(routine.icon);\n                  return (\n                    <tr key={routine.id} data-testid={`routine-row-${routine.id}`}>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"flex items-center\">\n                          <div className={`w-8 h-8 ${routine.bgColor} rounded-lg flex items-center justify-center mr-3`}>\n                            <IconComponent className={`h-4 w-4 ${routine.color}`} />\n                          </div>\n                          <span className=\"text-sm font-medium text-slate-900 dark:text-foreground\">\n                            {routine.subject}\n                          </span>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-slate-900 dark:text-foreground\">\n                        {routine.day}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-slate-900 dark:text-foreground\">\n                        {routine.startTime} - {routine.endTime}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <span className=\"inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800\">\n                          {formatMinutesToHours(routine.duration)}\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-slate-500 dark:text-slate-400\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"text-primary hover:text-primary/80 mr-3\"\n                          onClick={() => handleEditRoutine(routine)}\n                          data-testid={`button-edit-routine-${routine.id}`}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"text-red-600 hover:text-red-800\"\n                          onClick={() => handleDeleteRoutine(routine.id)}\n                          data-testid={`button-delete-routine-${routine.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n            \n            {studyRoutines.length === 0 && (\n              <div className=\"text-center py-8\">\n                <Clock className=\"w-12 h-12 mx-auto text-slate-400 mb-4\" />\n                <p className=\"text-slate-500 dark:text-slate-400\">No study routines added yet.</p>\n                <p className=\"text-sm text-slate-400 dark:text-slate-500\">Click \"Add Routine\" to create your first study schedule.</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Daily Summary */}\n      <Card className=\"chart-container\">\n        <CardHeader>\n          <CardTitle>Daily Study Hours Summary</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n            {days.map((day: string) => {\n              const totalMinutes = getTotalDayHours(day);\n              const routineCount = getDayRoutines(day).length;\n              return (\n                <div \n                  key={day} \n                  className=\"bg-slate-50 dark:bg-slate-800 rounded-lg p-4 text-center\"\n                >\n                  <h4 className=\"font-semibold text-slate-800 dark:text-foreground mb-2\">\n                    {day.slice(0, 3)}\n                  </h4>\n                  <p className=\"text-2xl font-bold text-blue-600 mb-1\">\n                    {formatMinutesToHours(totalMinutes)}\n                  </p>\n                  <p className=\"text-sm text-slate-500 dark:text-slate-400\">\n                    {routineCount} {routineCount === 1 ? 'session' : 'sessions'}\n                  </p>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"chart-container\">\n        <CardHeader>\n          <CardTitle>Weekly Progress</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-7 gap-4\">\n            {weeklyData.map((day) => (\n              <div key={day.day} className=\"text-center\">\n                <div className=\"text-sm font-medium text-slate-600 dark:text-muted-foreground mb-2\">\n                  {day.day}\n                </div>\n                <div className=\"h-32 bg-slate-100 dark:bg-slate-800 rounded-lg flex items-end justify-center p-2\">\n                  <div \n                    className=\"w-full bg-secondary rounded transition-all duration-300\"\n                    style={{ height: `${(day.hours / 6) * 100}%` }}\n                  />\n                </div>\n                <div className=\"text-xs text-slate-500 dark:text-slate-400 mt-1\">\n                  {day.hours}h\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":25500},"client/src/pages/tasks.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Plus, \n  MoreHorizontal, \n  Clock, \n  CheckCircle, \n  Wand2, \n  Play, \n  Pause, \n  X,\n  Calendar,\n  BarChart3,\n  Edit,\n  Trash2\n} from \"lucide-react\";\n\ninterface Task {\n  id: number;\n  title: string;\n  description: string;\n  category: \"Study\" | \"Exercise\" | \"Meals\" | \"Work\" | \"Personal\" | \"Entertainment\";\n  priority: \"Low\" | \"Medium\" | \"High\";\n  estimatedTime: string;\n  scheduledTime: string;\n  status: \"todo\" | \"progress\" | \"done\" | \"skipped\";\n  completedAt?: string;\n  date: string;\n}\n\ninterface DailyRecord {\n  date: string;\n  completed: number;\n  pending: number;\n  skipped: number;\n  total: number;\n}\n\nexport default function DailyRoutineTaskManager() {\n  const [tasks, setTasks] = useState<Task[]>([\n    {\n      id: 1,\n      title: \"Morning Study Session\",\n      description: \"Review React Hooks and JavaScript concepts\",\n      category: \"Study\",\n      priority: \"High\",\n      estimatedTime: \"2h\",\n      scheduledTime: \"08:00\",\n      status: \"todo\",\n      date: new Date().toISOString().split('T')[0],\n    },\n    {\n      id: 2,\n      title: \"Breakfast\",\n      description: \"Healthy breakfast with fruits and protein\",\n      category: \"Meals\",\n      priority: \"Medium\",\n      estimatedTime: \"30min\",\n      scheduledTime: \"07:00\",\n      status: \"done\",\n      completedAt: \"Completed at 07:15\",\n      date: new Date().toISOString().split('T')[0],\n    },\n    {\n      id: 3,\n      title: \"Exercise/Workout\",\n      description: \"30-minute cardio and strength training\",\n      category: \"Exercise\",\n      priority: \"High\",\n      estimatedTime: \"45min\",\n      scheduledTime: \"06:00\",\n      status: \"progress\",\n      date: new Date().toISOString().split('T')[0],\n    },\n    {\n      id: 4,\n      title: \"Lunch Break\",\n      description: \"Nutritious lunch and short rest\",\n      category: \"Meals\",\n      priority: \"Medium\",\n      estimatedTime: \"45min\",\n      scheduledTime: \"12:00\",\n      status: \"todo\",\n      date: new Date().toISOString().split('T')[0],\n    },\n  ]);\n\n  const [dailyRecords, setDailyRecords] = useState<DailyRecord[]>([]);\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [showRecords, setShowRecords] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n  const [editingTask, setEditingTask] = useState<Task | null>(null);\n\n  const [newTask, setNewTask] = useState({\n    title: \"\",\n    description: \"\",\n    category: \"Study\" as Task['category'],\n    priority: \"Medium\" as Task['priority'],\n    estimatedTime: \"\",\n    scheduledTime: \"\",\n  });\n\n  // Calculate daily records\n  useEffect(() => {\n    const today = new Date().toISOString().split('T')[0];\n    const todayTasks = tasks.filter(task => task.date === today);\n    \n    const record: DailyRecord = {\n      date: today,\n      completed: todayTasks.filter(task => task.status === \"done\").length,\n      pending: todayTasks.filter(task => task.status === \"todo\" || task.status === \"progress\").length,\n      skipped: todayTasks.filter(task => task.status === \"skipped\").length,\n      total: todayTasks.length,\n    };\n\n    setDailyRecords(prev => {\n      const filtered = prev.filter(r => r.date !== today);\n      return [...filtered, record];\n    });\n  }, [tasks]);\n\n  const todayTasks = tasks.filter(task => task.date === selectedDate);\n\n  const tasksByStatus = {\n    todo: todayTasks.filter(task => task.status === \"todo\"),\n    progress: todayTasks.filter(task => task.status === \"progress\"),\n    done: todayTasks.filter(task => task.status === \"done\"),\n    skipped: todayTasks.filter(task => task.status === \"skipped\"),\n  };\n\n  const getPriorityColor = (priority: string) => {\n    const colors = {\n      High: \"bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-300\",\n      Medium: \"bg-yellow-100 text-yellow-700 dark:bg-yellow-900/20 dark:text-yellow-300\", \n      Low: \"bg-slate-100 text-slate-700 dark:bg-slate-700 dark:text-slate-300\",\n    };\n    return colors[priority as keyof typeof colors] || colors.Low;\n  };\n\n  const getCategoryColor = (category: string) => {\n    const colors = {\n      Study: \"bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-300\",\n      Exercise: \"bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-300\",\n      Meals: \"bg-orange-100 text-orange-700 dark:bg-orange-900/20 dark:text-orange-300\",\n      Work: \"bg-purple-100 text-purple-700 dark:bg-purple-900/20 dark:text-purple-300\",\n      Personal: \"bg-pink-100 text-pink-700 dark:bg-pink-900/20 dark:text-pink-300\",\n      Entertainment: \"bg-indigo-100 text-indigo-700 dark:bg-indigo-900/20 dark:text-indigo-300\",\n    };\n    return colors[category as keyof typeof colors] || colors.Personal;\n  };\n\n  const getStatusConfig = (status: string) => {\n    const configs = {\n      todo: {\n        title: \"To Do\",\n        color: \"bg-slate-100 dark:bg-slate-800\",\n        dotColor: \"bg-slate-400\",\n        badgeColor: \"bg-slate-200 text-slate-600 dark:bg-slate-700 dark:text-slate-300\",\n      },\n      progress: {\n        title: \"In Progress\", \n        color: \"bg-blue-50 dark:bg-blue-950/20\",\n        dotColor: \"bg-blue-500\",\n        badgeColor: \"bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-300\",\n      },\n      done: {\n        title: \"Completed\",\n        color: \"bg-green-50 dark:bg-green-950/20\", \n        dotColor: \"bg-green-500\",\n        badgeColor: \"bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-300\",\n      },\n      skipped: {\n        title: \"Skipped\",\n        color: \"bg-red-50 dark:bg-red-950/20\", \n        dotColor: \"bg-red-500\",\n        badgeColor: \"bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-300\",\n      },\n    };\n    return configs[status as keyof typeof configs] || configs.todo;\n  };\n\n  const updateTaskStatus = (taskId: number, newStatus: Task['status']) => {\n    setTasks(prev => prev.map(task => {\n      if (task.id === taskId) {\n        return {\n          ...task,\n          status: newStatus,\n          completedAt: newStatus === \"done\" ? `Completed at ${new Date().toLocaleTimeString()}` : undefined,\n        };\n      }\n      return task;\n    }));\n  };\n\n  const addTask = () => {\n    if (!newTask.title.trim()) return;\n\n    const task: Task = {\n      id: Date.now(),\n      ...newTask,\n      status: \"todo\",\n      date: selectedDate,\n    };\n\n    setTasks(prev => [...prev, task]);\n    setNewTask({\n      title: \"\",\n      description: \"\",\n      category: \"Study\",\n      priority: \"Medium\",\n      estimatedTime: \"\",\n      scheduledTime: \"\",\n    });\n    setShowAddTask(false);\n  };\n\n  const deleteTask = (taskId: number) => {\n    setTasks(prev => prev.filter(task => task.id !== taskId));\n  };\n\n  const generateDailyTasks = () => {\n    const routineTasks = [\n      {\n        title: \"Morning Exercise\",\n        description: \"30-minute workout to start the day\",\n        category: \"Exercise\" as const,\n        priority: \"High\" as const,\n        estimatedTime: \"30min\",\n        scheduledTime: \"06:00\",\n      },\n      {\n        title: \"Breakfast\",\n        description: \"Healthy breakfast with protein and fruits\",\n        category: \"Meals\" as const,\n        priority: \"Medium\" as const,\n        estimatedTime: \"30min\",\n        scheduledTime: \"07:00\",\n      },\n      {\n        title: \"Study Session 1\",\n        description: \"Focus on main subjects and practice problems\",\n        category: \"Study\" as const,\n        priority: \"High\" as const,\n        estimatedTime: \"2h\",\n        scheduledTime: \"08:00\",\n      },\n      {\n        title: \"Mid-morning Snack\",\n        description: \"Light snack and hydration break\",\n        category: \"Meals\" as const,\n        priority: \"Low\" as const,\n        estimatedTime: \"15min\",\n        scheduledTime: \"10:00\",\n      },\n      {\n        title: \"Study Session 2\",\n        description: \"Continue with assignments and review\",\n        category: \"Study\" as const,\n        priority: \"High\" as const,\n        estimatedTime: \"2h\",\n        scheduledTime: \"10:30\",\n      },\n      {\n        title: \"Lunch Break\",\n        description: \"Nutritious lunch and rest\",\n        category: \"Meals\" as const,\n        priority: \"Medium\" as const,\n        estimatedTime: \"1h\",\n        scheduledTime: \"12:30\",\n      },\n      {\n        title: \"Recreation Time\",\n        description: \"Games, music, or entertainment\",\n        category: \"Entertainment\" as const,\n        priority: \"Medium\" as const,\n        estimatedTime: \"1h\",\n        scheduledTime: \"14:00\",\n      },\n      {\n        title: \"Evening Study\",\n        description: \"Review and practice what was learned\",\n        category: \"Study\" as const,\n        priority: \"Medium\" as const,\n        estimatedTime: \"1.5h\",\n        scheduledTime: \"16:00\",\n      },\n      {\n        title: \"Dinner\",\n        description: \"Healthy dinner with family\",\n        category: \"Meals\" as const,\n        priority: \"Medium\" as const,\n        estimatedTime: \"45min\",\n        scheduledTime: \"19:00\",\n      },\n      {\n        title: \"Evening Walk\",\n        description: \"Light exercise and fresh air\",\n        category: \"Exercise\" as const,\n        priority: \"Low\" as const,\n        estimatedTime: \"30min\",\n        scheduledTime: \"20:00\",\n      },\n    ];\n\n    const newTasks = routineTasks.map(task => ({\n      id: Date.now() + Math.random(),\n      ...task,\n      status: \"todo\" as const,\n      date: selectedDate,\n    }));\n\n    setTasks(prev => [...prev.filter(t => t.date !== selectedDate), ...newTasks]);\n  };\n\n  return (\n    <div className=\"space-y-6 p-4 max-w-7xl mx-auto\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h2 className=\"text-3xl font-bold text-slate-800 dark:text-foreground\">\n            Daily Routine Manager\n          </h2>\n          <p className=\"text-slate-600 dark:text-slate-400 mt-1\">\n            Manage your daily schedule and track progress\n          </p>\n        </div>\n        \n        <div className=\"flex flex-wrap gap-2\">\n          <input\n            type=\"date\"\n            value={selectedDate}\n            onChange={(e) => setSelectedDate(e.target.value)}\n            className=\"px-3 py-2 border rounded-lg dark:bg-slate-800 dark:border-slate-600\"\n          />\n          <Button \n            variant=\"outline\"\n            onClick={() => setShowRecords(!showRecords)}\n          >\n            <BarChart3 className=\"w-4 h-4 mr-2\" />\n            Records\n          </Button>\n          <Button \n            variant=\"outline\"\n            onClick={generateDailyTasks}\n          >\n            <Wand2 className=\"w-4 h-4 mr-2\" />\n            Generate Routine\n          </Button>\n          <Button onClick={() => setShowAddTask(true)}>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Task\n          </Button>\n        </div>\n      </div>\n\n      {/* Daily Summary */}\n      <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"p-4\">\n          <div className=\"text-2xl font-bold text-green-600\">{tasksByStatus.done.length}</div>\n          <div className=\"text-sm text-slate-600\">Completed</div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"text-2xl font-bold text-blue-600\">{tasksByStatus.progress.length}</div>\n          <div className=\"text-sm text-slate-600\">In Progress</div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"text-2xl font-bold text-slate-600\">{tasksByStatus.todo.length}</div>\n          <div className=\"text-sm text-slate-600\">Pending</div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"text-2xl font-bold text-red-600\">{tasksByStatus.skipped.length}</div>\n          <div className=\"text-sm text-slate-600\">Skipped</div>\n        </Card>\n      </div>\n\n      {/* Records Modal */}\n      {showRecords && (\n        <Card className=\"p-6\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h3 className=\"text-lg font-semibold\">Daily Records</h3>\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => setShowRecords(false)}>\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n          <div className=\"space-y-2\">\n            {dailyRecords.map((record) => (\n              <div key={record.date} className=\"flex justify-between items-center p-3 bg-slate-50 dark:bg-slate-800 rounded-lg\">\n                <span>{record.date}</span>\n                <div className=\"flex gap-4 text-sm\">\n                  <span className=\"text-green-600\">✓ {record.completed}</span>\n                  <span className=\"text-slate-600\">⏳ {record.pending}</span>\n                  <span className=\"text-red-600\">✗ {record.skipped}</span>\n                  <span className=\"text-slate-800 dark:text-slate-200 font-medium\">Total: {record.total}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </Card>\n      )}\n\n      {/* Add Task Modal */}\n      {showAddTask && (\n        <Card className=\"p-6\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h3 className=\"text-lg font-semibold\">Add New Task</h3>\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => setShowAddTask(false)}>\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <input\n              type=\"text\"\n              placeholder=\"Task title\"\n              value={newTask.title}\n              onChange={(e) => setNewTask(prev => ({...prev, title: e.target.value}))}\n              className=\"px-3 py-2 border rounded-lg dark:bg-slate-800 dark:border-slate-600\"\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Description\"\n              value={newTask.description}\n              onChange={(e) => setNewTask(prev => ({...prev, description: e.target.value}))}\n              className=\"px-3 py-2 border rounded-lg dark:bg-slate-800 dark:border-slate-600\"\n            />\n            <select\n              value={newTask.category}\n              onChange={(e) => setNewTask(prev => ({...prev, category: e.target.value as Task['category']}))}\n              className=\"px-3 py-2 border rounded-lg dark:bg-slate-800 dark:border-slate-600\"\n            >\n              <option value=\"Study\">Study</option>\n              <option value=\"Exercise\">Exercise</option>\n              <option value=\"Meals\">Meals</option>\n              <option value=\"Work\">Work</option>\n              <option value=\"Personal\">Personal</option>\n              <option value=\"Entertainment\">Entertainment</option>\n            </select>\n            <select\n              value={newTask.priority}\n              onChange={(e) => setNewTask(prev => ({...prev, priority: e.target.value as Task['priority']}))}\n              className=\"px-3 py-2 border rounded-lg dark:bg-slate-800 dark:border-slate-600\"\n            >\n              <option value=\"Low\">Low Priority</option>\n              <option value=\"Medium\">Medium Priority</option>\n              <option value=\"High\">High Priority</option>\n            </select>\n            <input\n              type=\"text\"\n              placeholder=\"Estimated time (e.g., 2h, 30min)\"\n              value={newTask.estimatedTime}\n              onChange={(e) => setNewTask(prev => ({...prev, estimatedTime: e.target.value}))}\n              className=\"px-3 py-2 border rounded-lg dark:bg-slate-800 dark:border-slate-600\"\n            />\n            <input\n              type=\"time\"\n              value={newTask.scheduledTime}\n              onChange={(e) => setNewTask(prev => ({...prev, scheduledTime: e.target.value}))}\n              className=\"px-3 py-2 border rounded-lg dark:bg-slate-800 dark:border-slate-600\"\n            />\n          </div>\n          <div className=\"flex justify-end gap-2 mt-4\">\n            <Button variant=\"outline\" onClick={() => setShowAddTask(false)}>Cancel</Button>\n            <Button onClick={addTask}>Add Task</Button>\n          </div>\n        </Card>\n      )}\n\n      {/* Task Columns */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {Object.entries(tasksByStatus).map(([status, statusTasks]) => {\n          const config = getStatusConfig(status);\n          \n          return (\n            <div key={status} className={`${config.color} rounded-xl p-4 min-h-[300px]`}>\n              <h3 className=\"font-semibold text-slate-800 dark:text-foreground mb-4 flex items-center\">\n                <div className={`w-3 h-3 ${config.dotColor} rounded-full mr-2`} />\n                {config.title}\n                <span className={`ml-auto ${config.badgeColor} px-2 py-1 rounded-full text-xs`}>\n                  {statusTasks.length}\n                </span>\n              </h3>\n              \n              <div className=\"space-y-3\">\n                {statusTasks\n                  .sort((a, b) => a.scheduledTime.localeCompare(b.scheduledTime))\n                  .map((task) => (\n                  <Card key={task.id} className=\"shadow-sm border border-slate-200 dark:border-slate-600\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <h4 className={`font-medium text-slate-800 dark:text-foreground ${\n                          task.status === \"done\" ? \"line-through\" : \"\"\n                        }`}>\n                          {task.title}\n                        </h4>\n                        <div className=\"flex gap-1\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => deleteTask(task.id)}\n                            className=\"text-red-400 hover:text-red-600 p-1\"\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                      \n                      <p className=\"text-sm text-slate-600 dark:text-slate-400 mb-3\">\n                        {task.description}\n                      </p>\n\n                      <div className=\"flex gap-1 mb-3\">\n                        <Badge className={`text-xs ${getCategoryColor(task.category)}`}>\n                          {task.category}\n                        </Badge>\n                        <Badge className={`text-xs ${getPriorityColor(task.priority)}`}>\n                          {task.priority}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between text-sm mb-3\">\n                        <span className=\"text-slate-500 dark:text-slate-400 flex items-center\">\n                          <Clock className=\"w-3 h-3 mr-1\" />\n                          {task.scheduledTime} ({task.estimatedTime})\n                        </span>\n                      </div>\n\n                      {task.completedAt && (\n                        <p className=\"text-xs text-green-600 mb-2\">{task.completedAt}</p>\n                      )}\n                      \n                      <div className=\"flex gap-2\">\n                        {task.status === \"todo\" && (\n                          <>\n                            <Button \n                              size=\"sm\" \n                              className=\"flex-1 text-xs\"\n                              onClick={() => updateTaskStatus(task.id, \"progress\")}\n                            >\n                              <Play className=\"w-3 h-3 mr-1\" />\n                              Start\n                            </Button>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              className=\"flex-1 text-xs\"\n                              onClick={() => updateTaskStatus(task.id, \"skipped\")}\n                            >\n                              Skip\n                            </Button>\n                          </>\n                        )}\n                        {task.status === \"progress\" && (\n                          <>\n                            <Button \n                              size=\"sm\" \n                              className=\"flex-1 text-xs bg-green-600 hover:bg-green-700\"\n                              onClick={() => updateTaskStatus(task.id, \"done\")}\n                            >\n                              <CheckCircle className=\"w-3 h-3 mr-1\" />\n                              Done\n                            </Button>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              className=\"flex-1 text-xs\"\n                              onClick={() => updateTaskStatus(task.id, \"todo\")}\n                            >\n                              <Pause className=\"w-3 h-3 mr-1\" />\n                              Pause\n                            </Button>\n                          </>\n                        )}\n                        {(task.status === \"done\" || task.status === \"skipped\") && (\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\"\n                            className=\"flex-1 text-xs\"\n                            onClick={() => updateTaskStatus(task.id, \"todo\")}\n                          >\n                            Reset\n                          </Button>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}","size_bytes":21838},"client/src/components/charts/expense-chart.tsx":{"content":"import { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\n\nconst data = [\n  { name: 'Food', value: 400, color: '#EF4444', percentage: 32 },\n  { name: 'Transport', value: 200, color: '#F59E0B', percentage: 16 },\n  { name: 'Entertainment', value: 150, color: '#10B981', percentage: 12 },\n  { name: 'Shopping', value: 300, color: '#8B5CF6', percentage: 24 },\n  { name: 'Bills', value: 184, color: '#06B6D4', percentage: 16 },\n];\n\nconst CustomTooltip = ({ active, payload }: any) => {\n  if (active && payload && payload.length) {\n    const data = payload[0].payload;\n    return (\n      <div className=\"bg-white dark:bg-slate-800 p-3 rounded-lg shadow-lg border border-slate-200 dark:border-slate-700\">\n        <p className=\"font-medium text-slate-800 dark:text-slate-200\">{data.name}</p>\n        <p className=\"text-slate-600 dark:text-slate-400\">\n          Amount: ${data.value}\n        </p>\n        <p className=\"text-slate-500 text-sm\">\n          {data.percentage}% of total\n        </p>\n      </div>\n    );\n  }\n  return null;\n};\n\nconst CustomLegend = (props: any) => {\n  const { payload } = props;\n  return (\n    <div className=\"flex flex-wrap justify-center gap-2 mt-4\">\n      {payload.map((entry: any, index: number) => (\n        <div key={index} className=\"flex items-center gap-2 text-xs\">\n          <div \n            className=\"w-3 h-3 rounded-full\" \n            style={{ backgroundColor: entry.color }}\n          />\n          <span className=\"text-slate-600 dark:text-slate-400\">{entry.value}</span>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default function ExpenseChart() {\n  return (\n    <ResponsiveContainer width=\"100%\" height={240}>\n      <PieChart>\n        <Pie\n          data={data}\n          cx=\"50%\"\n          cy=\"50%\"\n          innerRadius={50}\n          outerRadius={90}\n          paddingAngle={3}\n          dataKey=\"value\"\n        >\n          {data.map((entry, index) => (\n            <Cell \n              key={`cell-${index}`} \n              fill={entry.color}\n              stroke=\"#fff\"\n              strokeWidth={2}\n            />\n          ))}\n        </Pie>\n        <Tooltip content={<CustomTooltip />} />\n        <Legend content={<CustomLegend />} />\n      </PieChart>\n    </ResponsiveContainer>\n  );\n}\n","size_bytes":2266},"client/src/components/charts/productivity-trends-chart.tsx":{"content":"import { LineChart, Line, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Area, AreaChart, Tooltip, ReferenceLine } from 'recharts';\n\nconst data = [\n  { month: 'Jan', score: 75, target: 80, status: 'warning' },\n  { month: 'Feb', score: 82, target: 80, status: 'good' },\n  { month: 'Mar', score: 78, target: 80, status: 'warning' },\n  { month: 'Apr', score: 85, target: 80, status: 'good' },\n  { month: 'May', score: 87, target: 80, status: 'good' },\n  { month: 'Jun', score: 90, target: 80, status: 'excellent' },\n];\n\nconst getScoreColor = (score: number) => {\n  if (score >= 85) return '#10B981'; // Green - Excellent\n  if (score >= 75) return '#F59E0B'; // Yellow - Good\n  return '#EF4444'; // Red - Needs improvement\n};\n\nconst CustomTooltip = ({ active, payload, label }: any) => {\n  if (active && payload && payload.length) {\n    const data = payload[0].payload;\n    return (\n      <div className=\"bg-white dark:bg-slate-800 p-4 rounded-lg shadow-lg border border-slate-200 dark:border-slate-700\">\n        <p className=\"font-medium text-slate-800 dark:text-slate-200 mb-2\">{label}</p>\n        <div className=\"space-y-1\">\n          <p className=\"text-slate-600 dark:text-slate-400\">\n            Productivity Score: <span className=\"font-semibold\">{data.score}%</span>\n          </p>\n          <p className=\"text-slate-500 text-sm\">\n            Target: {data.target}%\n          </p>\n          <p className={`text-sm font-medium ${\n            data.score >= 85 ? 'text-green-600' : \n            data.score >= 75 ? 'text-yellow-600' : 'text-red-600'\n          }`}>\n            {data.score >= 85 ? 'Excellent Performance' : \n             data.score >= 75 ? 'Good Performance' : 'Needs Improvement'}\n          </p>\n        </div>\n      </div>\n    );\n  }\n  return null;\n};\n\nconst CustomDot = (props: any) => {\n  const { cx, cy, payload } = props;\n  const color = getScoreColor(payload.score);\n  \n  return (\n    <circle \n      cx={cx} \n      cy={cy} \n      r={6} \n      fill={color}\n      stroke=\"#fff\"\n      strokeWidth={3}\n      className=\"drop-shadow-sm\"\n    />\n  );\n};\n\nexport default function ProductivityTrendsChart() {\n  return (\n    <ResponsiveContainer width=\"100%\" height={420}>\n      <AreaChart data={data} margin={{ top: 20, right: 30, left: 0, bottom: 0 }}>\n        <defs>\n          <linearGradient id=\"productivityGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#3B82F6\" stopOpacity={0.3}/>\n            <stop offset=\"95%\" stopColor=\"#3B82F6\" stopOpacity={0.05}/>\n          </linearGradient>\n        </defs>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E2E8F0\" opacity={0.3} />\n        <XAxis \n          dataKey=\"month\" \n          fontSize={12}\n          stroke=\"#64748B\"\n          tick={{ fill: '#64748B' }}\n          axisLine={{ stroke: '#E2E8F0' }}\n        />\n        <YAxis \n          domain={[60, 100]}\n          fontSize={12}\n          stroke=\"#64748B\"\n          tick={{ fill: '#64748B' }}\n          axisLine={{ stroke: '#E2E8F0' }}\n        />\n        <Tooltip content={<CustomTooltip />} />\n        <ReferenceLine \n          y={80} \n          stroke=\"#F59E0B\" \n          strokeDasharray=\"5 5\" \n          strokeWidth={2}\n          label={{ value: \"Target\", position: \"right\" }}\n        />\n        <Area \n          type=\"monotone\" \n          dataKey=\"score\" \n          stroke=\"#3B82F6\" \n          strokeWidth={4}\n          fill=\"url(#productivityGradient)\"\n          dot={<CustomDot />}\n          activeDot={{ r: 8, fill: \"#3B82F6\", stroke: \"#fff\", strokeWidth: 3 }}\n        />\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n}\n","size_bytes":3588},"client/src/components/charts/spending-trend-chart.tsx":{"content":"import { BarChart, Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Tooltip, Cell } from 'recharts';\n\nconst data = [\n  { week: 'Week 1', amount: 320, budget: 400, status: 'good' },\n  { week: 'Week 2', amount: 280, budget: 400, status: 'good' },\n  { week: 'Week 3', amount: 410, budget: 400, status: 'over' },\n  { week: 'Week 4', amount: 234, budget: 400, status: 'good' },\n];\n\nconst getBarColor = (status: string) => {\n  switch (status) {\n    case 'good': return '#10B981'; // Green\n    case 'warning': return '#F59E0B'; // Yellow\n    case 'over': return '#EF4444'; // Red\n    default: return '#10B981';\n  }\n};\n\nconst CustomTooltip = ({ active, payload, label }: any) => {\n  if (active && payload && payload.length) {\n    const data = payload[0].payload;\n    return (\n      <div className=\"bg-white dark:bg-slate-800 p-3 rounded-lg shadow-lg border border-slate-200 dark:border-slate-700\">\n        <p className=\"font-medium text-slate-800 dark:text-slate-200\">{label}</p>\n        <p className=\"text-slate-600 dark:text-slate-400\">\n          Spent: ${data.amount}\n        </p>\n        <p className=\"text-slate-500 text-sm\">\n          Budget: ${data.budget}\n        </p>\n        <p className={`text-sm font-medium ${\n          data.status === 'good' ? 'text-green-600' : \n          data.status === 'warning' ? 'text-yellow-600' : 'text-red-600'\n        }`}>\n          {data.status === 'good' ? 'Within Budget' : \n           data.status === 'warning' ? 'Near Limit' : 'Over Budget'}\n        </p>\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default function SpendingTrendChart() {\n  return (\n    <ResponsiveContainer width=\"100%\" height={240}>\n      <BarChart data={data} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n        <defs>\n          <linearGradient id=\"greenGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#10B981\" stopOpacity={0.8}/>\n            <stop offset=\"95%\" stopColor=\"#10B981\" stopOpacity={0.6}/>\n          </linearGradient>\n          <linearGradient id=\"redGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#EF4444\" stopOpacity={0.8}/>\n            <stop offset=\"95%\" stopColor=\"#EF4444\" stopOpacity={0.6}/>\n          </linearGradient>\n          <linearGradient id=\"yellowGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#F59E0B\" stopOpacity={0.8}/>\n            <stop offset=\"95%\" stopColor=\"#F59E0B\" stopOpacity={0.6}/>\n          </linearGradient>\n        </defs>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E2E8F0\" opacity={0.3} />\n        <XAxis \n          dataKey=\"week\" \n          fontSize={12}\n          stroke=\"#64748B\"\n          tick={{ fill: '#64748B' }}\n          axisLine={{ stroke: '#E2E8F0' }}\n        />\n        <YAxis \n          fontSize={12}\n          stroke=\"#64748B\"\n          tick={{ fill: '#64748B' }}\n          axisLine={{ stroke: '#E2E8F0' }}\n        />\n        <Tooltip content={<CustomTooltip />} />\n        <Bar \n          dataKey=\"amount\" \n          radius={[6, 6, 0, 0]}\n        >\n          {data.map((entry, index) => (\n            <Cell \n              key={`cell-${index}`} \n              fill={entry.status === 'good' ? 'url(#greenGradient)' : \n                    entry.status === 'warning' ? 'url(#yellowGradient)' : 'url(#redGradient)'}\n            />\n          ))}\n        </Bar>\n      </BarChart>\n    </ResponsiveContainer>\n  );\n}\n","size_bytes":3403},"client/src/components/charts/study-progress-chart.tsx":{"content":"import { LineChart, Line, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Area, AreaChart, Tooltip } from 'recharts';\n\nconst data = [\n  { day: 'Mon', hours: 2, target: 4 },\n  { day: 'Tue', hours: 4, target: 4 },\n  { day: 'Wed', hours: 3, target: 4 },\n  { day: 'Thu', hours: 5, target: 4 },\n  { day: 'Fri', hours: 4, target: 4 },\n  { day: 'Sat', hours: 6, target: 4 },\n  { day: 'Sun', hours: 4.5, target: 4 },\n];\n\nconst CustomTooltip = ({ active, payload, label }: any) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className=\"bg-white dark:bg-slate-800 p-3 rounded-lg shadow-lg border border-slate-200 dark:border-slate-700\">\n        <p className=\"font-medium text-slate-800 dark:text-slate-200\">{`${label}`}</p>\n        <p className=\"text-green-600 dark:text-green-400\">\n          {`Study Hours: ${payload[0].value}h`}\n        </p>\n        <p className=\"text-slate-500 text-sm\">\n          {`Target: ${payload[0].payload.target}h`}\n        </p>\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default function StudyProgressChart() {\n  return (\n    <ResponsiveContainer width=\"100%\" height={240}>\n      <AreaChart data={data} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n        <defs>\n          <linearGradient id=\"studyGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#10B981\" stopOpacity={0.8}/>\n            <stop offset=\"95%\" stopColor=\"#10B981\" stopOpacity={0.1}/>\n          </linearGradient>\n        </defs>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E2E8F0\" opacity={0.3} />\n        <XAxis \n          dataKey=\"day\" \n          fontSize={12}\n          stroke=\"#64748B\"\n          tick={{ fill: '#64748B' }}\n          axisLine={{ stroke: '#E2E8F0' }}\n        />\n        <YAxis \n          fontSize={12}\n          stroke=\"#64748B\"\n          tick={{ fill: '#64748B' }}\n          axisLine={{ stroke: '#E2E8F0' }}\n        />\n        <Tooltip content={<CustomTooltip />} />\n        <Area \n          type=\"monotone\" \n          dataKey=\"hours\" \n          stroke=\"#10B981\" \n          strokeWidth={3}\n          fill=\"url(#studyGradient)\"\n          dot={{ fill: \"#10B981\", strokeWidth: 2, r: 5 }}\n          activeDot={{ r: 7, fill: \"#10B981\", stroke: \"#fff\", strokeWidth: 2 }}\n        />\n        <Line \n          type=\"monotone\" \n          dataKey=\"target\" \n          stroke=\"#FCD34D\" \n          strokeWidth={2}\n          strokeDasharray=\"5 5\"\n          dot={false}\n        />\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n}\n","size_bytes":2503},"client/src/components/charts/task-completion-chart.tsx":{"content":"import { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\n\nconst data = [\n  { name: 'Completed', value: 65, color: '#10B981', tasks: 13 },\n  { name: 'In Progress', value: 20, color: '#F59E0B', tasks: 4 },\n  { name: 'Pending', value: 15, color: '#EF4444', tasks: 3 },\n];\n\nconst CustomTooltip = ({ active, payload }: any) => {\n  if (active && payload && payload.length) {\n    const data = payload[0].payload;\n    return (\n      <div className=\"bg-white dark:bg-slate-800 p-3 rounded-lg shadow-lg border border-slate-200 dark:border-slate-700\">\n        <p className=\"font-medium text-slate-800 dark:text-slate-200\">{data.name}</p>\n        <p className=\"text-slate-600 dark:text-slate-400\">\n          {data.tasks} tasks ({data.value}%)\n        </p>\n      </div>\n    );\n  }\n  return null;\n};\n\nconst CustomLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent }: any) => {\n  const RADIAN = Math.PI / 180;\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  if (percent < 0.05) return null; // Don't show label for small slices\n\n  return (\n    <text \n      x={x} \n      y={y} \n      fill=\"white\" \n      textAnchor={x > cx ? 'start' : 'end'} \n      dominantBaseline=\"central\"\n      fontSize={12}\n      fontWeight=\"bold\"\n    >\n      {`${(percent * 100).toFixed(0)}%`}\n    </text>\n  );\n};\n\nexport default function TaskCompletionChart() {\n  return (\n    <ResponsiveContainer width=\"100%\" height={320}>\n      <PieChart>\n        <Pie\n          data={data}\n          cx=\"50%\"\n          cy=\"45%\"\n          outerRadius={110}\n          dataKey=\"value\"\n          labelLine={false}\n          label={<CustomLabel />}\n        >\n          {data.map((entry, index) => (\n            <Cell \n              key={`cell-${index}`} \n              fill={entry.color}\n              stroke=\"#fff\"\n              strokeWidth={3}\n            />\n          ))}\n        </Pie>\n        <Tooltip content={<CustomTooltip />} />\n        <Legend \n          verticalAlign=\"bottom\" \n          height={36}\n          iconType=\"circle\"\n          wrapperStyle={{ \n            fontSize: '14px',\n            paddingTop: '20px'\n          }}\n        />\n      </PieChart>\n    </ResponsiveContainer>\n  );\n}\n","size_bytes":2317},"client/src/components/charts/weekly-overview-chart.tsx":{"content":"import { BarChart, Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Tooltip, Cell } from 'recharts';\n\nconst data = [\n  { \n    day: 'Mon', \n    tasks: 8, \n    study: 3, \n    expenses: 45,\n    productivity: 85,\n    status: 'excellent'\n  },\n  { \n    day: 'Tue', \n    tasks: 6, \n    study: 2.5, \n    expenses: 67,\n    productivity: 78,\n    status: 'good'\n  },\n  { \n    day: 'Wed', \n    tasks: 5, \n    study: 4, \n    expenses: 23,\n    productivity: 92,\n    status: 'excellent'\n  },\n  { \n    day: 'Thu', \n    tasks: 7, \n    study: 3.5, \n    expenses: 89,\n    productivity: 80,\n    status: 'good'\n  },\n  { \n    day: 'Fri', \n    tasks: 9, \n    study: 2, \n    expenses: 124,\n    productivity: 75,\n    status: 'warning'\n  },\n  { \n    day: 'Sat', \n    tasks: 4, \n    study: 5, \n    expenses: 156,\n    productivity: 88,\n    status: 'excellent'\n  },\n  { \n    day: 'Sun', \n    tasks: 3, \n    study: 4.5, \n    expenses: 98,\n    productivity: 90,\n    status: 'excellent'\n  },\n];\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case 'excellent': return '#10B981'; // Green\n    case 'good': return '#F59E0B'; // Yellow\n    case 'warning': return '#EF4444'; // Red\n    default: return '#10B981';\n  }\n};\n\nconst CustomTooltip = ({ active, payload, label }: any) => {\n  if (active && payload && payload.length) {\n    const data = payload[0].payload;\n    return (\n      <div className=\"bg-white dark:bg-slate-800 p-4 rounded-lg shadow-lg border border-slate-200 dark:border-slate-700\">\n        <p className=\"font-medium text-slate-800 dark:text-slate-200 mb-2\">{label}</p>\n        <div className=\"space-y-1 text-sm\">\n          <p className=\"text-slate-600 dark:text-slate-400\">\n            Tasks Completed: <span className=\"font-semibold text-blue-600\">{data.tasks}</span>\n          </p>\n          <p className=\"text-slate-600 dark:text-slate-400\">\n            Study Hours: <span className=\"font-semibold text-green-600\">{data.study}h</span>\n          </p>\n          <p className=\"text-slate-600 dark:text-slate-400\">\n            Expenses: <span className=\"font-semibold text-purple-600\">${data.expenses}</span>\n          </p>\n          <p className=\"text-slate-600 dark:text-slate-400\">\n            Productivity: <span className={`font-semibold ${\n              data.productivity >= 85 ? 'text-green-600' : \n              data.productivity >= 75 ? 'text-yellow-600' : 'text-red-600'\n            }`}>{data.productivity}%</span>\n          </p>\n        </div>\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default function WeeklyOverviewChart() {\n  return (\n    <ResponsiveContainer width=\"100%\" height={280}>\n      <BarChart data={data} margin={{ top: 20, right: 30, left: 0, bottom: 0 }}>\n        <defs>\n          <linearGradient id=\"taskGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#3B82F6\" stopOpacity={0.8}/>\n            <stop offset=\"95%\" stopColor=\"#3B82F6\" stopOpacity={0.6}/>\n          </linearGradient>\n          <linearGradient id=\"studyGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#10B981\" stopOpacity={0.8}/>\n            <stop offset=\"95%\" stopColor=\"#10B981\" stopOpacity={0.6}/>\n          </linearGradient>\n        </defs>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E2E8F0\" opacity={0.3} />\n        <XAxis \n          dataKey=\"day\" \n          fontSize={12}\n          stroke=\"#64748B\"\n          tick={{ fill: '#64748B' }}\n          axisLine={{ stroke: '#E2E8F0' }}\n        />\n        <YAxis \n          fontSize={12}\n          stroke=\"#64748B\"\n          tick={{ fill: '#64748B' }}\n          axisLine={{ stroke: '#E2E8F0' }}\n        />\n        <Tooltip content={<CustomTooltip />} />\n        <Bar \n          dataKey=\"tasks\" \n          fill=\"url(#taskGradient)\"\n          radius={[4, 4, 0, 0]}\n          name=\"Tasks\"\n        />\n        <Bar \n          dataKey=\"study\" \n          fill=\"url(#studyGradient)\"\n          radius={[4, 4, 0, 0]}\n          name=\"Study Hours\"\n        />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n}","size_bytes":4026},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  Home, \n  Wallet, \n  Book, \n  CheckSquare, \n  BarChart3, \n  Flame,\n  Plus,\n  Play,\n  Receipt,\n  TrendingUp\n} from \"lucide-react\";\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onOpenAddTask: () => void;\n  onOpenAddExpense: () => void;\n}\n\nexport default function Sidebar({ isOpen, onClose, onOpenAddTask, onOpenAddExpense }: SidebarProps) {\n  const [location] = useLocation();\n\n  const navItems = [\n    { href: \"/dashboard\", label: \"Dashboard\", icon: Home },\n    { href: \"/expenses\", label: \"Expenses\", icon: Wallet },\n    { href: \"/study\", label: \"Study Tracker\", icon: Book },\n    { href: \"/tasks\", label: \"Task Manager\", icon: CheckSquare },\n    { href: \"/reports\", label: \"Reports\", icon: BarChart3 },\n  ];\n\n  const handleStartStudy = () => {\n    // TODO: Implement study session start\n    onClose();\n  };\n\n  return (\n    <>\n      {/* Mobile overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-20 lg:hidden\"\n          onClick={onClose}\n        />\n      )}\n\n      {/* Sidebar */}\n      <aside className={cn(\n        \"bg-white dark:bg-card shadow-lg w-64 min-h-screen fixed left-0 top-0 z-30 transform transition-transform duration-300\",\n        isOpen ? \"translate-x-0\" : \"-translate-x-full lg:translate-x-0\"\n      )}>\n        <div className=\"p-6 border-b border-slate-200 dark:border-border\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <TrendingUp className=\"h-5 w-5 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-semibold text-slate-800 dark:text-foreground\">\n                ProductivityHub\n              </h1>\n              <p className=\"text-sm text-slate-600 dark:text-muted-foreground\">\n                John Doe\n              </p>\n            </div>\n          </div>\n        </div>\n        \n        <nav className=\"p-4\">\n          <ul className=\"space-y-2\">\n            {navItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.href || (location === \"/\" && item.href === \"/dashboard\");\n              \n              return (\n                <li key={item.href}>\n                  <Link href={item.href}>\n                    <div \n                      className={cn(\n                        \"nav-item\",\n                        isActive && \"active\"\n                      )}\n                      onClick={onClose}\n                      data-testid={`nav-${item.label.toLowerCase().replace(' ', '-')}`}\n                    >\n                      <Icon className=\"w-5 h-5\" />\n                      <span>{item.label}</span>\n                    </div>\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n          \n          <div className=\"mt-8 p-4 bg-gradient-to-r from-primary to-secondary rounded-lg text-white\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Flame className=\"h-4 w-4 text-accent\" />\n              <span className=\"font-medium\">Current Streak</span>\n            </div>\n            <p className=\"text-2xl font-bold\">7 days</p>\n            <p className=\"text-sm opacity-90\">Keep it up!</p>\n          </div>\n\n          <div className=\"mt-6 space-y-3\">\n            <h3 className=\"text-sm font-medium text-slate-600 dark:text-muted-foreground px-4\">\n              Quick Actions\n            </h3>\n            <button \n              className=\"w-full btn-primary flex items-center space-x-3\"\n              onClick={onOpenAddTask}\n              data-testid=\"button-add-task\"\n            >\n              <Plus className=\"h-4 w-4\" />\n              <span>Add Task</span>\n            </button>\n            <button \n              className=\"w-full btn-secondary flex items-center space-x-3\"\n              onClick={handleStartStudy}\n              data-testid=\"button-start-study\"\n            >\n              <Play className=\"h-4 w-4\" />\n              <span>Start Study</span>\n            </button>\n            <button \n              className=\"w-full btn-accent flex items-center space-x-3\"\n              onClick={onOpenAddExpense}\n              data-testid=\"button-add-expense\"\n            >\n              <Receipt className=\"h-4 w-4\" />\n              <span>Add Expense</span>\n            </button>\n          </div>\n        </nav>\n      </aside>\n    </>\n  );\n}\n","size_bytes":4553},"client/src/components/layout/top-bar.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Menu, Bell } from \"lucide-react\";\n\ninterface TopBarProps {\n  onToggleSidebar: () => void;\n}\n\nexport default function TopBar({ onToggleSidebar }: TopBarProps) {\n  const [location] = useLocation();\n\n  const getPageTitle = () => {\n    const titles: { [key: string]: string } = {\n      \"/\": \"Dashboard\",\n      \"/dashboard\": \"Dashboard\",\n      \"/expenses\": \"Expense Tracker\",\n      \"/study\": \"Study Tracker\", \n      \"/tasks\": \"Task Manager\",\n      \"/reports\": \"Progress Reports\"\n    };\n    return titles[location] || \"Dashboard\";\n  };\n\n  return (\n    <header className=\"bg-white dark:bg-card shadow-sm border-b border-slate-200 dark:border-border sticky top-0 z-20\">\n      <div className=\"flex items-center justify-between px-6 py-4\">\n        <div className=\"flex items-center space-x-4\">\n          <button \n            className=\"lg:hidden text-slate-600 dark:text-muted-foreground hover:text-slate-800 dark:hover:text-foreground\"\n            onClick={onToggleSidebar}\n            data-testid=\"button-mobile-menu\"\n          >\n            <Menu className=\"h-6 w-6\" />\n          </button>\n          <h2 className=\"text-xl font-semibold text-slate-800 dark:text-foreground\">\n            {getPageTitle()}\n          </h2>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <button \n            className=\"relative p-2 text-slate-600 dark:text-muted-foreground hover:text-slate-800 dark:hover:text-foreground hover:bg-slate-100 dark:hover:bg-slate-800 rounded-lg transition-colors\"\n            data-testid=\"button-notifications\"\n          >\n            <Bell className=\"h-5 w-5\" />\n            <span className=\"absolute -top-1 -right-1 w-5 h-5 bg-error text-white text-xs rounded-full flex items-center justify-center\">\n              3\n            </span>\n          </button>\n          \n          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n            <span className=\"text-white font-medium text-sm\">JD</span>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2091},"client/src/components/modals/achievement-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Trophy } from \"lucide-react\";\n\ninterface Achievement {\n  type: string;\n  title: string;\n  description: string;\n}\n\ninterface AchievementModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  achievement: Achievement;\n}\n\nexport default function AchievementModal({ isOpen, onClose, achievement }: AchievementModalProps) {\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md mx-4 text-center\">\n        <div className=\"w-20 h-20 bg-gradient-to-r from-accent to-warning rounded-full flex items-center justify-center mx-auto mb-4\">\n          <Trophy className=\"h-10 w-10 text-white\" />\n        </div>\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-bold text-slate-800 dark:text-foreground mb-2\">\n            Achievement Unlocked!\n          </DialogTitle>\n        </DialogHeader>\n        <p className=\"text-slate-600 dark:text-muted-foreground mb-4\">\n          {achievement.description}\n        </p>\n        <Button \n          onClick={onClose}\n          className=\"btn-primary\"\n          data-testid=\"button-close-achievement\"\n        >\n          Awesome!\n        </Button>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":1335},"client/src/components/modals/add-expense-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface AddExpenseModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function AddExpenseModal({ isOpen, onClose }: AddExpenseModalProps) {\n  const [formData, setFormData] = useState({\n    description: \"\",\n    amount: \"\",\n    category: \"Food\",\n  });\n\n  const categories = [\"Food\", \"Transport\", \"Entertainment\", \"Shopping\", \"Bills\", \"Health\", \"Education\"];\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // TODO: Implement expense creation\n    console.log(\"Creating expense:\", formData);\n    onClose();\n    setFormData({\n      description: \"\",\n      amount: \"\",\n      category: \"Food\",\n    });\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md mx-4 w-full\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold text-slate-800 dark:text-foreground\">\n            Add New Expense\n          </DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"description\" className=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n              Description\n            </Label>\n            <Input\n              id=\"description\"\n              type=\"text\"\n              placeholder=\"Enter expense description\"\n              value={formData.description}\n              onChange={(e) => handleInputChange(\"description\", e.target.value)}\n              data-testid=\"input-expense-description\"\n              required\n            />\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"amount\" className=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                Amount\n              </Label>\n              <Input\n                id=\"amount\"\n                type=\"number\"\n                step=\"0.01\"\n                placeholder=\"0.00\"\n                value={formData.amount}\n                onChange={(e) => handleInputChange(\"amount\", e.target.value)}\n                data-testid=\"input-expense-amount\"\n                required\n              />\n            </div>\n            <div>\n              <Label className=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                Category\n              </Label>\n              <Select value={formData.category} onValueChange={(value) => handleInputChange(\"category\", value)}>\n                <SelectTrigger data-testid=\"select-expense-category\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {categories.map((category) => (\n                    <SelectItem key={category} value={category}>\n                      {category}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\"\n              onClick={onClose}\n              data-testid=\"button-cancel-expense\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\"\n              data-testid=\"button-submit-expense\"\n            >\n              Add Expense\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3937},"client/src/components/modals/add-task-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface AddTaskModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function AddTaskModal({ isOpen, onClose }: AddTaskModalProps) {\n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    priority: \"Medium\",\n    estimatedTime: \"\",\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // TODO: Implement task creation\n    console.log(\"Creating task:\", formData);\n    onClose();\n    setFormData({\n      title: \"\",\n      description: \"\",\n      priority: \"Medium\", \n      estimatedTime: \"\",\n    });\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md mx-4 w-full\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold text-slate-800 dark:text-foreground\">\n            Add New Task\n          </DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"title\" className=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n              Task Title\n            </Label>\n            <Input\n              id=\"title\"\n              type=\"text\"\n              placeholder=\"Enter task title\"\n              value={formData.title}\n              onChange={(e) => handleInputChange(\"title\", e.target.value)}\n              data-testid=\"input-task-title\"\n              required\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"description\" className=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n              Description\n            </Label>\n            <Textarea\n              id=\"description\"\n              placeholder=\"Task description\"\n              rows={3}\n              value={formData.description}\n              onChange={(e) => handleInputChange(\"description\", e.target.value)}\n              data-testid=\"input-task-description\"\n            />\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label className=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                Priority\n              </Label>\n              <Select value={formData.priority} onValueChange={(value) => handleInputChange(\"priority\", value)}>\n                <SelectTrigger data-testid=\"select-task-priority\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Low\">Low</SelectItem>\n                  <SelectItem value=\"Medium\">Medium</SelectItem>\n                  <SelectItem value=\"High\">High</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"estimatedTime\" className=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                Estimated Time\n              </Label>\n              <Input\n                id=\"estimatedTime\"\n                type=\"text\"\n                placeholder=\"2h\"\n                value={formData.estimatedTime}\n                onChange={(e) => handleInputChange(\"estimatedTime\", e.target.value)}\n                data-testid=\"input-estimated-time\"\n              />\n            </div>\n          </div>\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\"\n              onClick={onClose}\n              data-testid=\"button-cancel-task\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\"\n              data-testid=\"button-submit-task\"\n            >\n              Add Task\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4333},"client/src/components/modals/motivation-popup.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, Star, Zap, Trophy, Heart, Loader2, Wifi, WifiOff, RefreshCw } from \"lucide-react\";\n\ninterface MotivationPopupProps {\n  isOpen: boolean;\n  onClose: () => void;\n  userData?: any;\n}\n\ninterface Quote {\n  text: string;\n  author: string;\n  category?: string;\n}\n\nexport default function MotivationPopup({ isOpen, onClose, userData }: MotivationPopupProps) {\n  const [quote, setQuote] = useState<Quote>({ text: \"\", author: \"\" });\n  const [isLoading, setIsLoading] = useState(false);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [icon, setIcon] = useState<React.ReactNode>(null);\n  const [error, setError] = useState(\"\");\n\n  // Fallback motivational quotes for offline use\n  const fallbackQuotes: Quote[] = [\n    { text: \"The only way to do great work is to love what you do.\", author: \"Steve Jobs\" },\n    { text: \"Success is not final, failure is not fatal: it is the courage to continue that counts.\", author: \"Winston Churchill\" },\n    { text: \"The future belongs to those who believe in the beauty of their dreams.\", author: \"Eleanor Roosevelt\" },\n    { text: \"It is during our darkest moments that we must focus to see the light.\", author: \"Aristotle\" },\n    { text: \"The only impossible journey is the one you never begin.\", author: \"Tony Robbins\" },\n    { text: \"In the middle of difficulty lies opportunity.\", author: \"Albert Einstein\" },\n    { text: \"Believe you can and you're halfway there.\", author: \"Theodore Roosevelt\" },\n    { text: \"Don't watch the clock; do what it does. Keep going.\", author: \"Sam Levenson\" },\n    { text: \"The way to get started is to quit talking and begin doing.\", author: \"Walt Disney\" },\n    { text: \"Your limitation—it's only your imagination.\", author: \"Unknown\" },\n    { text: \"Push yourself, because no one else is going to do it for you.\", author: \"Unknown\" },\n    { text: \"Great things never come from comfort zones.\", author: \"Unknown\" },\n    { text: \"Dream it. Wish it. Do it.\", author: \"Unknown\" },\n    { text: \"Success doesn't just find you. You have to go out and get it.\", author: \"Unknown\" },\n    { text: \"The harder you work for something, the greater you'll feel when you achieve it.\", author: \"Unknown\" }\n  ];\n\n  // Multiple API endpoints for better reliability\n  const quoteAPIs = [\n    {\n      name: \"Quotable\",\n      url: \"https://api.quotable.io/random?tags=motivational,inspirational,success\",\n      transform: (data: any) => ({\n        text: data.content,\n        author: data.author,\n        category: data.tags?.[0]\n      })\n    },\n    {\n      name: \"ZenQuotes\",\n      url: \"https://zenquotes.io/api/random\",\n      transform: (data: any) => ({\n        text: data[0]?.q || data[0]?.quote,\n        author: data[0]?.a || data[0]?.author,\n        category: \"motivation\"\n      })\n    },\n    {\n      name: \"Quotes API\",\n      url: \"https://api.api-ninjas.com/v1/quotes?category=motivational\",\n      headers: {\n        'X-Api-Key': 'YOUR_API_KEY' // You would need to get a free API key from API Ninjas\n      },\n      transform: (data: any) => ({\n        text: data[0]?.quote,\n        author: data[0]?.author,\n        category: data[0]?.category\n      })\n    },\n    {\n      name: \"Quotegarden\",\n      url: \"https://quote-garden.herokuapp.com/api/v3/quotes/random\",\n      transform: (data: any) => ({\n        text: data.data?.quoteText,\n        author: data.data?.quoteAuthor,\n        category: data.data?.quoteGenre\n      })\n    }\n  ];\n\n  // Monitor online status\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // Fetch quote from online APIs\n  const fetchOnlineQuote = async (): Promise<Quote | null> => {\n    for (const api of quoteAPIs) {\n      try {\n        const response = await fetch(api.url, {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            ...(api.headers || {})\n          },\n        });\n\n        if (!response.ok) continue;\n\n        const data = await response.json();\n        const transformedQuote = api.transform(data);\n\n        if (transformedQuote.text && transformedQuote.author) {\n          return transformedQuote;\n        }\n      } catch (error) {\n        console.warn(`Failed to fetch from ${api.name}:`, error);\n        continue;\n      }\n    }\n    return null;\n  };\n\n  // Get random fallback quote\n  const getFallbackQuote = (): Quote => {\n    const randomIndex = Math.floor(Math.random() * fallbackQuotes.length);\n    return fallbackQuotes[randomIndex];\n  };\n\n  // Load motivational content\n  const loadMotivationalContent = async () => {\n    setIsLoading(true);\n    setError(\"\");\n\n    let selectedQuote: Quote;\n\n    if (isOnline) {\n      try {\n        const onlineQuote = await fetchOnlineQuote();\n        if (onlineQuote) {\n          selectedQuote = onlineQuote;\n        } else {\n          selectedQuote = getFallbackQuote();\n          setError(\"Using offline quotes\");\n        }\n      } catch (error) {\n        selectedQuote = getFallbackQuote();\n        setError(\"Connection failed, using offline quotes\");\n      }\n    } else {\n      selectedQuote = getFallbackQuote();\n      setError(\"You're offline, using cached quotes\");\n    }\n\n    setQuote(selectedQuote);\n    setIsLoading(false);\n\n    // Set appropriate icon based on quote content or category\n    const quoteText = selectedQuote.text.toLowerCase();\n    const category = selectedQuote.category?.toLowerCase() || \"\";\n\n    if (quoteText.includes(\"success\") || quoteText.includes(\"achieve\") || category.includes(\"success\")) {\n      setIcon(<Trophy className=\"h-8 w-8 text-yellow-500\" />);\n    } else if (quoteText.includes(\"work\") || quoteText.includes(\"effort\") || category.includes(\"work\")) {\n      setIcon(<Zap className=\"h-8 w-8 text-orange-500\" />);\n    } else if (quoteText.includes(\"dream\") || quoteText.includes(\"believe\") || category.includes(\"inspiration\")) {\n      setIcon(<Star className=\"h-8 w-8 text-blue-500\" />);\n    } else {\n      setIcon(<Heart className=\"h-8 w-8 text-pink-500\" />);\n    }\n  };\n\n  // Load content when popup opens\n  useEffect(() => {\n    if (isOpen) {\n      loadMotivationalContent();\n    }\n  }, [isOpen, isOnline]);\n\n  // Generate personalized message if user data is available\n  const generatePersonalizedMessage = () => {\n    if (!userData) return \"\";\n\n    const messages = [\n      `🎯 You've got this! Keep pushing toward your goals.`,\n      `⚡ Your dedication is inspiring. Stay consistent!`,\n      `🌟 Every small step counts. You're making progress!`,\n      `🔥 Your hard work is paying off. Don't give up now!`,\n      `💪 You're stronger than you think. Keep going!`\n    ];\n\n    return messages[Math.floor(Math.random() * messages.length)];\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-lg mx-4 text-center border-none shadow-2xl overflow-hidden\">\n        {/* Animated gradient backdrop */}\n        <div className=\"absolute inset-0 bg-gradient-to-br from-blue-500/10 via-purple-500/10 to-pink-500/10 animate-gradient-x\" />\n        \n        {/* Content */}\n        <div className=\"relative z-10 p-6\">\n          {/* Header */}\n          <div className=\"flex justify-between items-center mb-4\">\n            <div className=\"flex items-center gap-2\">\n              {isOnline ? (\n                <Wifi className=\"h-4 w-4 text-green-500\" />\n              ) : (\n                <WifiOff className=\"h-4 w-4 text-red-500\" />\n              )}\n              <span className=\"text-xs text-slate-500\">\n                {isOnline ? \"Online\" : \"Offline\"}\n              </span>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={loadMotivationalContent}\n                disabled={isLoading}\n                className=\"h-8 w-8 p-0\"\n              >\n                {isLoading ? (\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  <RefreshCw className=\"h-4 w-4\" />\n                )}\n              </Button>\n              \n              <button \n                onClick={onClose}\n                className=\"text-slate-400 hover:text-slate-600 dark:text-slate-500 dark:hover:text-slate-300 h-8 w-8 flex items-center justify-center\"\n                data-testid=\"button-close-motivation\"\n              >\n                <X className=\"h-5 w-5\" />\n              </button>\n            </div>\n          </div>\n\n          {/* Error message */}\n          {error && (\n            <div className=\"bg-yellow-100 dark:bg-yellow-900/20 text-yellow-800 dark:text-yellow-200 px-3 py-2 rounded-lg text-sm mb-4\">\n              {error}\n            </div>\n          )}\n\n          {/* Icon */}\n          <div className=\"w-20 h-20 bg-white dark:bg-slate-800 rounded-full flex items-center justify-center mx-auto mb-6 shadow-lg ring-4 ring-white/50 dark:ring-slate-700/50\">\n            {isLoading ? (\n              <Loader2 className=\"h-8 w-8 text-blue-500 animate-spin\" />\n            ) : (\n              icon\n            )}\n          </div>\n\n          {/* Title */}\n          <h3 className=\"text-2xl font-bold text-slate-800 dark:text-foreground mb-4\">\n            {isLoading ? \"Loading Inspiration...\" : \"Daily Motivation\"}\n          </h3>\n\n          {/* Personalized message */}\n          {userData && (\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4 mb-4\">\n              <p className=\"text-blue-800 dark:text-blue-200 text-sm font-medium\">\n                {generatePersonalizedMessage()}\n              </p>\n            </div>\n          )}\n\n          {/* Quote */}\n          {!isLoading && quote.text && (\n            <div className=\"mb-6\">\n              <blockquote className=\"text-slate-700 dark:text-slate-300 text-lg leading-relaxed italic mb-3\">\n                \"{quote.text}\"\n              </blockquote>\n              {quote.author && (\n                <cite className=\"text-slate-500 dark:text-slate-400 text-sm font-medium\">\n                  — {quote.author}\n                </cite>\n              )}\n              {quote.category && (\n                <div className=\"mt-2\">\n                  <span className=\"inline-block bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 px-2 py-1 rounded-full text-xs\">\n                    {quote.category}\n                  </span>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Loading state */}\n          {isLoading && (\n            <div className=\"mb-6\">\n              <div className=\"space-y-3\">\n                <div className=\"h-4 bg-slate-200 dark:bg-slate-700 rounded animate-pulse\"></div>\n                <div className=\"h-4 bg-slate-200 dark:bg-slate-700 rounded animate-pulse w-3/4 mx-auto\"></div>\n                <div className=\"h-3 bg-slate-200 dark:bg-slate-700 rounded animate-pulse w-1/2 mx-auto\"></div>\n              </div>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-3 justify-center\">\n            <Button \n              variant=\"outline\"\n              onClick={loadMotivationalContent}\n              disabled={isLoading}\n              className=\"min-w-[100px]\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Loading\n                </>\n              ) : (\n                <>\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  New Quote\n                </>\n              )}\n            </Button>\n            \n            <Button \n              onClick={onClose}\n              className=\"btn-primary min-w-[120px]\"\n              data-testid=\"button-dismiss-motivation\"\n            >\n              Keep Going! 💪\n            </Button>\n          </div>\n\n          {/* Footer */}\n          <div className=\"mt-4 text-xs text-slate-400 dark:text-slate-500\">\n            {isOnline ? (\n              \"Powered by online motivation APIs\"\n            ) : (\n              \"Offline mode - Cached inspirational quotes\"\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":12658},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}